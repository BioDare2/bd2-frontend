import { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "../../../tooltip/tooltip.service";
import * as i2 from "@angular/common";
export class DataPointBoxComponent {
    constructor(tooltip, zone) {
        this.tooltip = tooltip;
        this.zone = zone;
    }
    ngOnChanges(changes) {
        if (this.xScale && this.point) {
            this.xPosition = this.xScale(this.point.left);
            const band = this.xScale(this.point.right) - this.xScale(this.point.left);
            this.xWidth = band >= 2 ? band - 1 : 1;
        }
    }
    ngAfterViewInit() {
        if (this.boxNode) {
            if ((this.prevBoxNode !== this.boxNode)) {
                this.removeMouseListeners(this.prevBoxNode);
                this.zone.runOutsideAngular(() => {
                    this.addMouseListeners(this.boxNode);
                });
                this.prevBoxNode = this.boxNode;
            }
        }
    }
    ngOnInit() {
    }
    ngOnDestroy() {
        this.removeMouseListeners(this.boxNode);
    }
    addMouseListeners(elm) {
        if (elm) {
            elm.nativeElement.addEventListener('mouseover', this.showTooltip.bind(this));
            elm.nativeElement.addEventListener('mouseout', this.hideTooltip.bind(this));
        }
    }
    removeMouseListeners(elm) {
        if (elm) {
            elm.nativeElement.removeEventListener('mouseover', this.showTooltip);
            elm.nativeElement.removeEventListener('mouseout', this.hideTooltip);
        }
    }
    hideTooltip($event) {
        const location = { x: this.xPosition, y: this.yPosition, width: this.xWidth };
        this.tooltip.hideTooltip(this.point, location);
    }
    showTooltip($event) {
        const location = { x: this.xPosition, y: this.yPosition, width: this.xWidth };
        this.tooltip.showTooltip(this.label, this.point, location);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DataPointBoxComponent, deps: [{ token: i1.TooltipService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: DataPointBoxComponent, selector: "[bd2hm-data-point-box]", inputs: { point: "point", yPosition: "yPosition", yHeight: "yHeight", xScale: "xScale", colorScale: "colorScale", label: "label" }, viewQueries: [{ propertyName: "boxNode", first: true, predicate: ["box"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <svg:rect #box *ngIf="point && xScale" [attr.x]="xPosition" [attr.y]="yPosition"
              [attr.width]="xWidth"
              [attr.height]="yHeight" [attr.fill]="colorScale(point.y)" [attr.stroke]="colorScale(point.y)"
    >
    </svg:rect>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: DataPointBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: '[bd2hm-data-point-box]', template: `
    <svg:rect #box *ngIf="point && xScale" [attr.x]="xPosition" [attr.y]="yPosition"
              [attr.width]="xWidth"
              [attr.height]="yHeight" [attr.fill]="colorScale(point.y)" [attr.stroke]="colorScale(point.y)"
    >
    </svg:rect>
  `, changeDetection: ChangeDetectionStrategy.OnPush }]
        }], ctorParameters: function () { return [{ type: i1.TooltipService }, { type: i0.NgZone }]; }, propDecorators: { boxNode: [{
                type: ViewChild,
                args: ['box']
            }], point: [{
                type: Input
            }], yPosition: [{
                type: Input
            }], yHeight: [{
                type: Input
            }], xScale: [{
                type: Input
            }], colorScale: [{
                type: Input
            }], label: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS1wb2ludC1ib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYmQyLW5neC1oZWF0bWFwL3NyYy9saWIvcGxvdC1lbGVtZW50cy9zZXJpZXMtYm94L3NlcmllLXJvdy9kYXRhLXBvaW50LWJveC9kYXRhLXBvaW50LWJveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLHVCQUF1QixFQUN2QixTQUFTLEVBRVQsS0FBSyxFQU1MLFNBQVMsRUFDVixNQUFNLGVBQWUsQ0FBQzs7OztBQWtCdkIsTUFBTSxPQUFPLHFCQUFxQjtJQTRCaEMsWUFBb0IsT0FBdUIsRUFBVSxJQUFZO1FBQTdDLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUNqRSxDQUFDO0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzlDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDMUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDMUM7SUFDSCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUVoQixJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ3ZDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzVDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO29CQUMvQixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUN2QyxDQUFDLENBQUMsQ0FBQztnQkFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDakM7U0FDRjtJQUNILENBQUM7SUFFRCxRQUFRO0lBQ1IsQ0FBQztJQUdELFdBQVc7UUFDVCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFRCxpQkFBaUIsQ0FBQyxHQUFtQztRQUNuRCxJQUFJLEdBQUcsRUFBRTtZQUNQLEdBQUcsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDN0UsR0FBRyxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUM3RTtJQUNILENBQUM7SUFFRCxvQkFBb0IsQ0FBQyxHQUFtQztRQUN0RCxJQUFJLEdBQUcsRUFBRTtZQUNQLEdBQUcsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNyRSxHQUFHLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDckU7SUFDSCxDQUFDO0lBRUQsV0FBVyxDQUFDLE1BQVc7UUFDckIsTUFBTSxRQUFRLEdBQUcsRUFBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBQyxDQUFDO1FBQzVFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDakQsQ0FBQztJQUVELFdBQVcsQ0FBQyxNQUFXO1FBQ3JCLE1BQU0sUUFBUSxHQUFHLEVBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUMsQ0FBQztRQUM1RSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0QsQ0FBQzsrR0FsRlUscUJBQXFCO21HQUFyQixxQkFBcUIsdVRBVnRCOzs7Ozs7R0FNVDs7NEZBSVUscUJBQXFCO2tCQVpqQyxTQUFTOytCQUNFLHdCQUF3QixZQUN4Qjs7Ozs7O0dBTVQsbUJBRWdCLHVCQUF1QixDQUFDLE1BQU07MEhBSy9DLE9BQU87c0JBRE4sU0FBUzt1QkFBQyxLQUFLO2dCQU1oQixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sU0FBUztzQkFEUixLQUFLO2dCQUlOLE9BQU87c0JBRE4sS0FBSztnQkFJTixNQUFNO3NCQURMLEtBQUs7Z0JBSU4sVUFBVTtzQkFEVCxLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgQWZ0ZXJWaWV3SW5pdCxcclxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICBDb21wb25lbnQsXHJcbiAgRWxlbWVudFJlZixcclxuICBJbnB1dCxcclxuICBOZ1pvbmUsXHJcbiAgT25DaGFuZ2VzLFxyXG4gIE9uRGVzdHJveSxcclxuICBPbkluaXQsXHJcbiAgU2ltcGxlQ2hhbmdlcyxcclxuICBWaWV3Q2hpbGRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtCb3hEZWZ9IGZyb20gJy4uLy4uLy4uLy4uL2JkMi1oZWF0bWFwLmRvbSc7XHJcbmltcG9ydCB7U2NhbGVMaW5lYXIsIFNjYWxlUXVhbnRpemV9IGZyb20gJ2QzLXNjYWxlJztcclxuaW1wb3J0IHtUb29sdGlwU2VydmljZX0gZnJvbSAnLi4vLi4vLi4vdG9vbHRpcC90b29sdGlwLnNlcnZpY2UnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnW2JkMmhtLWRhdGEtcG9pbnQtYm94XScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgIDxzdmc6cmVjdCAjYm94ICpuZ0lmPVwicG9pbnQgJiYgeFNjYWxlXCIgW2F0dHIueF09XCJ4UG9zaXRpb25cIiBbYXR0ci55XT1cInlQb3NpdGlvblwiXHJcbiAgICAgICAgICAgICAgW2F0dHIud2lkdGhdPVwieFdpZHRoXCJcclxuICAgICAgICAgICAgICBbYXR0ci5oZWlnaHRdPVwieUhlaWdodFwiIFthdHRyLmZpbGxdPVwiY29sb3JTY2FsZShwb2ludC55KVwiIFthdHRyLnN0cm9rZV09XCJjb2xvclNjYWxlKHBvaW50LnkpXCJcclxuICAgID5cclxuICAgIDwvc3ZnOnJlY3Q+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtdLFxyXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhUG9pbnRCb3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgQFZpZXdDaGlsZCgnYm94JylcclxuICBib3hOb2RlOiBFbGVtZW50UmVmPFNWR0dyYXBoaWNzRWxlbWVudD47XHJcblxyXG4gIHByZXZCb3hOb2RlOiBFbGVtZW50UmVmPFNWR0dyYXBoaWNzRWxlbWVudD47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcG9pbnQ6IEJveERlZjtcclxuXHJcbiAgQElucHV0KClcclxuICB5UG9zaXRpb246IG51bWJlcjtcclxuXHJcbiAgQElucHV0KClcclxuICB5SGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgeFNjYWxlOiBTY2FsZUxpbmVhcjxudW1iZXIsIG51bWJlcj47XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgY29sb3JTY2FsZTogU2NhbGVRdWFudGl6ZTxzdHJpbmc+O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGxhYmVsOiBzdHJpbmc7XHJcblxyXG4gIHhQb3NpdGlvbjogbnVtYmVyO1xyXG4gIHhXaWR0aDogbnVtYmVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHRvb2x0aXA6IFRvb2x0aXBTZXJ2aWNlLCBwcml2YXRlIHpvbmU6IE5nWm9uZSkge1xyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMueFNjYWxlICYmIHRoaXMucG9pbnQpIHtcclxuICAgICAgICB0aGlzLnhQb3NpdGlvbiA9IHRoaXMueFNjYWxlKHRoaXMucG9pbnQubGVmdCk7XHJcbiAgICAgICAgY29uc3QgYmFuZCA9IHRoaXMueFNjYWxlKHRoaXMucG9pbnQucmlnaHQpIC0gdGhpcy54U2NhbGUodGhpcy5wb2ludC5sZWZ0KTtcclxuICAgICAgICB0aGlzLnhXaWR0aCA9IGJhbmQgPj0gMiA/IGJhbmQgLSAxIDogMTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmJveE5vZGUpIHtcclxuXHJcbiAgICAgIGlmICgodGhpcy5wcmV2Qm94Tm9kZSAhPT0gdGhpcy5ib3hOb2RlKSkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcnModGhpcy5wcmV2Qm94Tm9kZSk7XHJcbiAgICAgICAgdGhpcy56b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgIHRoaXMuYWRkTW91c2VMaXN0ZW5lcnModGhpcy5ib3hOb2RlKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnByZXZCb3hOb2RlID0gdGhpcy5ib3hOb2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG5cclxuICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgIHRoaXMucmVtb3ZlTW91c2VMaXN0ZW5lcnModGhpcy5ib3hOb2RlKTtcclxuICB9XHJcblxyXG4gIGFkZE1vdXNlTGlzdGVuZXJzKGVsbTogRWxlbWVudFJlZjxTVkdHcmFwaGljc0VsZW1lbnQ+KSB7XHJcbiAgICBpZiAoZWxtKSB7XHJcbiAgICAgIGVsbS5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuc2hvd1Rvb2x0aXAuYmluZCh0aGlzKSk7XHJcbiAgICAgIGVsbS5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlb3V0JywgdGhpcy5oaWRlVG9vbHRpcC5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZU1vdXNlTGlzdGVuZXJzKGVsbTogRWxlbWVudFJlZjxTVkdHcmFwaGljc0VsZW1lbnQ+KSB7XHJcbiAgICBpZiAoZWxtKSB7XHJcbiAgICAgIGVsbS5uYXRpdmVFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlb3ZlcicsIHRoaXMuc2hvd1Rvb2x0aXApO1xyXG4gICAgICBlbG0ubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW91dCcsIHRoaXMuaGlkZVRvb2x0aXApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgaGlkZVRvb2x0aXAoJGV2ZW50OiBhbnkpIHtcclxuICAgIGNvbnN0IGxvY2F0aW9uID0ge3g6IHRoaXMueFBvc2l0aW9uLCB5OiB0aGlzLnlQb3NpdGlvbiwgd2lkdGg6IHRoaXMueFdpZHRofTtcclxuICAgIHRoaXMudG9vbHRpcC5oaWRlVG9vbHRpcCh0aGlzLnBvaW50LCBsb2NhdGlvbik7XHJcbiAgfVxyXG5cclxuICBzaG93VG9vbHRpcCgkZXZlbnQ6IGFueSkge1xyXG4gICAgY29uc3QgbG9jYXRpb24gPSB7eDogdGhpcy54UG9zaXRpb24sIHk6IHRoaXMueVBvc2l0aW9uLCB3aWR0aDogdGhpcy54V2lkdGh9O1xyXG4gICAgdGhpcy50b29sdGlwLnNob3dUb29sdGlwKHRoaXMubGFiZWwsIHRoaXMucG9pbnQsIGxvY2F0aW9uKTtcclxuICB9XHJcblxyXG5cclxufVxyXG5cclxuXHJcbiJdfQ==
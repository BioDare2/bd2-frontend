import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./label-box/label-box.component";
export class LabelsComponent {
    constructor() {
        this.alwaysOn = true;
    }
    trackByIndex(index, item) {
        return index;
    }
    ngOnInit() {
    }
    yStart(serie) {
        // return this.graphic.yScale(serie.key) + this.graphic.yScale.bandwidth() / 4;
        return this.graphic.yScale(serie.key);
    }
    maxHeight() {
        return this.graphic.yScale.bandwidth();
    }
    color(ix) {
        return this.graphic.labelsColors(ix);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LabelsComponent, selector: "[bd2hm-labels]", inputs: { graphic: "graphic", data: "data", alwaysOn: "alwaysOn" }, ngImport: i0, template: `
    <svg:g *ngIf="graphic && data" class="bd2hm-labels">
      <svg:g bd2hm-label-box *ngFor="let serie of data; let ix = index; trackBy: trackByIndex"
             [serie]="serie"
             [yStart]="yStart(serie)" [maxHeight]="maxHeight()" [alwaysOn]="alwaysOn"
      ></svg:g>
    </svg:g>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.LabelBoxComponent, selector: "[bd2hm-label-box]", inputs: ["serie", "yStart", "maxHeight", "alwaysOn", "color"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelsComponent, decorators: [{
            type: Component,
            args: [{ selector: '[bd2hm-labels]', template: `
    <svg:g *ngIf="graphic && data" class="bd2hm-labels">
      <svg:g bd2hm-label-box *ngFor="let serie of data; let ix = index; trackBy: trackByIndex"
             [serie]="serie"
             [yStart]="yStart(serie)" [maxHeight]="maxHeight()" [alwaysOn]="alwaysOn"
      ></svg:g>
    </svg:g>
  `, changeDetection: ChangeDetectionStrategy.OnPush }]
        }], ctorParameters: function () { return []; }, propDecorators: { graphic: [{
                type: Input
            }], data: [{
                type: Input
            }], alwaysOn: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFiZWxzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JkMi1uZ3gtaGVhdG1hcC9zcmMvbGliL3Bsb3QtZWxlbWVudHMvbGFiZWxzL2xhYmVscy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7Ozs7QUFnQmhGLE1BQU0sT0FBTyxlQUFlO0lBVzFCO1FBRkEsYUFBUSxHQUFHLElBQUksQ0FBQztJQUdoQixDQUFDO0lBRUQsWUFBWSxDQUFDLEtBQWEsRUFBRSxJQUFTO1FBQ25DLE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVELFFBQVE7SUFDUixDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQVk7UUFDakIsK0VBQStFO1FBQy9FLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUN6QyxDQUFDO0lBRUQsS0FBSyxDQUFDLEVBQVU7UUFDZCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7K0dBaENVLGVBQWU7bUdBQWYsZUFBZSwwSEFYaEI7Ozs7Ozs7R0FPVDs7NEZBSVUsZUFBZTtrQkFiM0IsU0FBUzsrQkFDRSxnQkFBZ0IsWUFDaEI7Ozs7Ozs7R0FPVCxtQkFFZ0IsdUJBQXVCLENBQUMsTUFBTTswRUFLL0MsT0FBTztzQkFETixLQUFLO2dCQUlOLElBQUk7c0JBREgsS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIElucHV0LCBPbkluaXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0dyYXBoaWNDb250ZXh0LCBTZXJpZX0gZnJvbSAnLi4vLi4vYmQyLWhlYXRtYXAuZG9tJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnW2JkMmhtLWxhYmVsc10nLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICA8c3ZnOmcgKm5nSWY9XCJncmFwaGljICYmIGRhdGFcIiBjbGFzcz1cImJkMmhtLWxhYmVsc1wiPlxyXG4gICAgICA8c3ZnOmcgYmQyaG0tbGFiZWwtYm94ICpuZ0Zvcj1cImxldCBzZXJpZSBvZiBkYXRhOyBsZXQgaXggPSBpbmRleDsgdHJhY2tCeTogdHJhY2tCeUluZGV4XCJcclxuICAgICAgICAgICAgIFtzZXJpZV09XCJzZXJpZVwiXHJcbiAgICAgICAgICAgICBbeVN0YXJ0XT1cInlTdGFydChzZXJpZSlcIiBbbWF4SGVpZ2h0XT1cIm1heEhlaWdodCgpXCIgW2Fsd2F5c09uXT1cImFsd2F5c09uXCJcclxuICAgICAgPjwvc3ZnOmc+XHJcbiAgICA8L3N2ZzpnPlxyXG4gIGAsXHJcbiAgc3R5bGVzOiBbXSxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTGFiZWxzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgQElucHV0KClcclxuICBncmFwaGljOiBHcmFwaGljQ29udGV4dDtcclxuXHJcbiAgQElucHV0KClcclxuICBkYXRhOiBTZXJpZVtdO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGFsd2F5c09uID0gdHJ1ZTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgfVxyXG5cclxuICB0cmFja0J5SW5kZXgoaW5kZXg6IG51bWJlciwgaXRlbTogYW55KSB7XHJcbiAgICByZXR1cm4gaW5kZXg7XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICB9XHJcblxyXG4gIHlTdGFydChzZXJpZTogU2VyaWUpIHtcclxuICAgIC8vIHJldHVybiB0aGlzLmdyYXBoaWMueVNjYWxlKHNlcmllLmtleSkgKyB0aGlzLmdyYXBoaWMueVNjYWxlLmJhbmR3aWR0aCgpIC8gNDtcclxuICAgIHJldHVybiB0aGlzLmdyYXBoaWMueVNjYWxlKHNlcmllLmtleSk7XHJcbiAgfVxyXG5cclxuICBtYXhIZWlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5ncmFwaGljLnlTY2FsZS5iYW5kd2lkdGgoKTtcclxuICB9XHJcblxyXG4gIGNvbG9yKGl4OiBudW1iZXIpIHtcclxuICAgIHJldHVybiB0aGlzLmdyYXBoaWMubGFiZWxzQ29sb3JzKGl4KTtcclxuICB9XHJcblxyXG4gIC8qXHJcbiAgeU1pZGRsZShzZXJpZTogU2VyaWUpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiQmFuZFwiLCB0aGlzLmdyYXBoaWMueVNjYWxlLmJhbmR3aWR0aCgpKTtcclxuICAgIHJldHVybiB0aGlzLmdyYXBoaWMueVNjYWxlKHNlcmllLmtleSkgKyB0aGlzLmdyYXBoaWMueVNjYWxlLmJhbmR3aWR0aCgpIC8gMjtcclxuICB9Ki9cclxuXHJcblxyXG4gIC8qeUhlaWdodCgpIHtcclxuICAgIHJldHVybiAyICsgdGhpcy5ncmFwaGljLnlTY2FsZS5iYW5kd2lkdGgoKSAvIDI7XHJcbiAgfSovXHJcblxyXG5cclxufVxyXG4iXX0=
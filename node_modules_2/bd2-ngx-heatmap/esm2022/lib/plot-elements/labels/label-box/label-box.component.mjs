import { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';
import { timer } from 'rxjs';
import { map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class LabelBoxComponent {
    constructor(changeDetector) {
        this.changeDetector = changeDetector;
        this.alwaysOn = true;
        this.color = 'rgb(67, 125, 179)';
        this.textBWidth = 0;
        this.textBY = 0;
        this.toggled = false;
        this.ready = false;
    }
    ngOnInit() {
    }
    ngOnChanges(changes) {
        this.margin = this.marginSize();
        this.triggerY = this.yStart + this.margin;
        this.triggerHeight = this.margin > 1 ? this.maxHeight - 2 * this.margin : this.maxHeight - 1;
        this.yMiddle = this.yStart + this.maxHeight / 2;
    }
    marginSize() {
        if (this.maxHeight >= 20) {
            return 4;
        }
        if (this.maxHeight >= 12) {
            return 2;
        }
        return 1;
    }
    fontSize() {
        if (this.maxHeight > 12) {
            return 10;
        }
        if (this.maxHeight >= 6) {
            return this.maxHeight - 3;
        }
        return 0;
    }
    toggleLabel(val) {
        if (val === undefined) {
            val = !this.toggled;
        }
        this.ready = false;
        this.toggled = val;
        if (this.toggled) {
            this.updateTextBBox().subscribe(rect => {
                if (this.toggled) {
                    this.ready = true;
                }
                this.changeDetector.markForCheck();
            });
        }
    }
    updateTextBBox() {
        return timer(0).pipe(map(r => this.textBBox()), tap(rect => this.setTextBBox(rect)));
    }
    setTextBBox(rect) {
        this.textBY = rect.y - 4;
        this.textBHeight = rect.height + 8;
        this.textBWidth = rect.x + rect.width + 4;
    }
    textBBox() {
        if (!this.textNode) {
            return { x: 0, y: 0, height: 0, width: 0 };
        }
        return this.textNode.nativeElement.getBBox();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelBoxComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: LabelBoxComponent, selector: "[bd2hm-label-box]", inputs: { serie: "serie", yStart: "yStart", maxHeight: "maxHeight", alwaysOn: "alwaysOn", color: "color" }, viewQueries: [{ propertyName: "textNode", first: true, predicate: ["text"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `
    <svg:g *ngIf="serie" class="bd2hm-label">
      <svg:text *ngIf="alwaysOn" x="5" [attr.y]="yMiddle" class="bd2hm-onLabel"
                [attr.font-size]="fontSize()"
      >{{serie.label}}</svg:text>

      <g (mouseout)="toggleLabel(false)" (mouseover)="toggleLabel(true)">
        <svg:rect x="-7" width="7" [attr.y]="triggerY" [attr.height]="triggerHeight" [attr.fill]="color"
        ></svg:rect>

        <!--<svg:circle [attr.cx]="-cirR()-2" [attr.cy]="yMiddle" [attr.r]="cirR()" [attr.fill]="'rgb(67, 125, 179)'"
                    [attr.filter]="band < 7 ? undefined : 'url(#bd2hm-shadow)'"
        ></svg:circle>-->

        <svg:g class="bd2hm-hover" [attr.opacity]="ready ? 1 : 0" [attr.display]="toggled ? undefined : 'none'">
          <svg:rect x="0" [attr.width]="textBWidth" [attr.y]="textBY" [attr.height]="textBHeight"
          ></svg:rect>
          <svg:text #text x="5" [attr.y]="yMiddle"
          >{{serie.label}}</svg:text>
        </svg:g>
      </g>
    </svg:g>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: LabelBoxComponent, decorators: [{
            type: Component,
            args: [{ selector: '[bd2hm-label-box]', template: `
    <svg:g *ngIf="serie" class="bd2hm-label">
      <svg:text *ngIf="alwaysOn" x="5" [attr.y]="yMiddle" class="bd2hm-onLabel"
                [attr.font-size]="fontSize()"
      >{{serie.label}}</svg:text>

      <g (mouseout)="toggleLabel(false)" (mouseover)="toggleLabel(true)">
        <svg:rect x="-7" width="7" [attr.y]="triggerY" [attr.height]="triggerHeight" [attr.fill]="color"
        ></svg:rect>

        <!--<svg:circle [attr.cx]="-cirR()-2" [attr.cy]="yMiddle" [attr.r]="cirR()" [attr.fill]="'rgb(67, 125, 179)'"
                    [attr.filter]="band < 7 ? undefined : 'url(#bd2hm-shadow)'"
        ></svg:circle>-->

        <svg:g class="bd2hm-hover" [attr.opacity]="ready ? 1 : 0" [attr.display]="toggled ? undefined : 'none'">
          <svg:rect x="0" [attr.width]="textBWidth" [attr.y]="textBY" [attr.height]="textBHeight"
          ></svg:rect>
          <svg:text #text x="5" [attr.y]="yMiddle"
          >{{serie.label}}</svg:text>
        </svg:g>
      </g>
    </svg:g>
  `, changeDetection: ChangeDetectionStrategy.OnPush }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { serie: [{
                type: Input
            }], yStart: [{
                type: Input
            }], maxHeight: [{
                type: Input
            }], alwaysOn: [{
                type: Input
            }], color: [{
                type: Input
            }], textNode: [{
                type: ViewChild,
                args: ['text']
            }] } });
//# sourceMappingURL=data:application/json;base64,
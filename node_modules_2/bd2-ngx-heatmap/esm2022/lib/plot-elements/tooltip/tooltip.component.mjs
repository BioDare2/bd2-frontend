import { ChangeDetectionStrategy, Component, Input, ViewChild } from '@angular/core';
import { timer } from 'rxjs';
import { debounceTime, map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./tooltip.service";
import * as i2 from "@angular/common";
// [attr.display]="showBack ? undefined : 'none'"
// [style.visibility]="showBack ? undefined :'hidden'"
export class TooltipComponent {
    constructor(tooltip, changeDetector) {
        this.tooltip = tooltip;
        this.changeDetector = changeDetector;
        this.boxMargin = 4;
        this.show = false;
        this.ready = false;
    }
    ngOnInit() {
        this.subscription = this.tooltip.request$.pipe(debounceTime(100)).subscribe(request => this.handleRequest(request));
    }
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    handleRequest([show, label, point, location]) {
        if (show) {
            this.showTooltip(label, point, location);
        }
        else {
            this.hideTooltip(point, location);
        }
    }
    showTooltip(label, point, location) {
        this.ready = false;
        this.label = this.formatLabel(label);
        this.values = this.formatValues(point);
        this.show = true;
        // change detection not mark as it can be called outside ngzone
        this.changeDetector.detectChanges();
        this.updateTextBBox().subscribe(rect => {
            if (this.show) {
                this.position = this.translateToDataLocation(location, this.textBWidth, this.graphic.workspaceWidth);
                this.ready = true;
            }
            // change detection not mark as it can be called outside ngzone
            // it has to be called again as textobox is determined after the timer so does the new position
            // this.changeDetector.markForCheck();
            this.changeDetector.detectChanges();
        });
    }
    translateToDataLocation(location, textBoxWidth, workspaceWidth) {
        let x = location.x + location.width + 2 * this.boxMargin;
        if ((x + textBoxWidth) >= workspaceWidth) {
            x = location.x - textBoxWidth;
        }
        const y = location.y;
        return `translate(${x}, ${y})`;
    }
    hideTooltip(point, location) {
        this.show = false;
        // this.changeDetector.markForCheck();
        this.changeDetector.detectChanges();
    }
    formatValues(point) {
        return `${this.graphic.domainFormatter(point.x)} : ${this.graphic.valuesFormatter(point.y)}`;
    }
    updateTextBBox() {
        return timer(0).pipe(map(r => this.textBBox()), tap(rect => this.setTextBBox(rect)));
    }
    setTextBBox(rect) {
        this.textBX = rect.x - this.boxMargin;
        this.textBY = rect.y - this.boxMargin;
        this.textBHeight = rect.height + 2 * this.boxMargin;
        this.textBWidth = rect.width + 2 * this.boxMargin;
    }
    textBBox() {
        if (!this.textNode) {
            return { x: 0, y: 0, height: 0, width: 0 };
        }
        return this.textNode.nativeElement.getBBox();
    }
    formatLabel(label) {
        if (!label) {
            return '';
        }
        if (label.length < 40) {
            return label;
        }
        return label.substring(0, 38) + '...';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipComponent, deps: [{ token: i1.TooltipService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: TooltipComponent, selector: "[bd2hm-tooltip]", inputs: { graphic: "graphic", boxMargin: "boxMargin" }, viewQueries: [{ propertyName: "textNode", first: true, predicate: ["text"], descendants: true }], ngImport: i0, template: `
    <svg:g *ngIf="graphic" class="bd2hm-tooltipBox" [attr.display]="show ? undefined : 'none'" [attr.transform]="position">

      <svg:g [attr.opacity]="ready ? 1 : 0">
        <svg:rect [attr.x]="textBX" [attr.width]="textBWidth" [attr.y]="textBY" [attr.height]="textBHeight"
        ></svg:rect>

        <svg:text #text>
          <tspan x="0">{{label}}</tspan>
          <tspan x="0" dy="1.2em">{{values}}</tspan>
        </svg:text>
      </svg:g>

    </svg:g>
  `, isInline: true, dependencies: [{ kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: TooltipComponent, decorators: [{
            type: Component,
            args: [{ selector: '[bd2hm-tooltip]', template: `
    <svg:g *ngIf="graphic" class="bd2hm-tooltipBox" [attr.display]="show ? undefined : 'none'" [attr.transform]="position">

      <svg:g [attr.opacity]="ready ? 1 : 0">
        <svg:rect [attr.x]="textBX" [attr.width]="textBWidth" [attr.y]="textBY" [attr.height]="textBHeight"
        ></svg:rect>

        <svg:text #text>
          <tspan x="0">{{label}}</tspan>
          <tspan x="0" dy="1.2em">{{values}}</tspan>
        </svg:text>
      </svg:g>

    </svg:g>
  `, changeDetection: ChangeDetectionStrategy.OnPush }]
        }], ctorParameters: function () { return [{ type: i1.TooltipService }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { graphic: [{
                type: Input
            }], boxMargin: [{
                type: Input
            }], textNode: [{
                type: ViewChild,
                args: ['text']
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { BoxDef, GraphicContext } from './bd2-heatmap.dom';
import { scaleBand, scaleLinear, scaleQuantize } from 'd3-scale';
import { colors } from './color-util';
import { format } from 'd3-format';
import { interpolateSpectral } from 'd3-scale-chromatic';
export class HeatmapGraphUtil {
    prepareGraphicContext(data, lookAndFeel, middleZero = false) {
        const context = new GraphicContext();
        this.calculateDimensions(context, data, lookAndFeel);
        this.addPaneAttributes(context, lookAndFeel);
        this.addScales(context, data, lookAndFeel, middleZero);
        this.addFormatters(context, data);
        context.labelsColors = this.labelsColors(data);
        return context;
    }
    calculateDimensions(context, data, lookAndFeel) {
        context.pWidth = 500;
        context.workspaceWidth = context.pWidth - 3 * lookAndFeel.hMargin;
        context.workspaceHeight = this.calculateWorkspaceHeight(data, lookAndFeel);
        context.pHeight = context.workspaceHeight + 2 * lookAndFeel.vMargin;
    }
    calculateWorkspaceHeight(data, lookAndFeel) {
        if (data.length <= 25) {
            return data.length * lookAndFeel.bigRowWidth;
        }
        if (data.length <= 100) {
            return data.length * lookAndFeel.midRowWidth;
        }
        return data.length * lookAndFeel.smallRowWidth;
    }
    addPaneAttributes(context, lookAndFeel) {
        context.viewBox = `0 0 500 ${context.pHeight}`;
        context.mainPaneTransform = `translate(${2 * lookAndFeel.hMargin}, ${lookAndFeel.vMargin})`;
    }
    addScales(context, data, lookAndFeel, middleZero) {
        let timeDomain = this.timeDomain(data);
        context.xDomain = timeDomain;
        const margin = this.timeMargin(data, timeDomain);
        timeDomain = [timeDomain[0] - margin, timeDomain[1] + margin];
        context.xScale = scaleLinear()
            .clamp(true)
            .domain(timeDomain)
            .range([0, context.workspaceWidth]);
        const yDomain = data.map(s => s.key);
        context.yDomain = yDomain;
        context.yScale = scaleBand()
            .paddingInner(lookAndFeel.rowGap)
            .paddingOuter(0)
            .domain(yDomain)
            .range([0, context.workspaceHeight]);
        context.colorScale = this.heatmapScale(data, middleZero);
    }
    addFormatters(context, data) {
        const timeDomain = this.timeDomain(data);
        context.domainFormatter = this.formatForDomain(timeDomain);
        const valuesRange = this.valuesRange(data);
        context.valuesFormatter = this.formatForDomain(valuesRange);
    }
    timeMargin(data, timeDomain) {
        const min = timeDomain[0];
        let margin = 0.5;
        data.filter(serie => serie.data && serie.data.length > 0 && serie.data[0].x === min)
            .forEach(serie => {
            const p = serie.data[0];
            if (p instanceof BoxDef) {
                margin = Math.max(margin, p.x - p.left);
            }
        });
        return margin;
    }
    timeDomain(data) {
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        data.forEach(serie => {
            if (serie.data && serie.data.length > 0) {
                min = Math.min(min, serie.data[0].x);
                max = Math.max(max, serie.data[serie.data.length - 1].x);
            }
        });
        min = isFinite(min) ? min : 0;
        max = isFinite(max) ? max : 1;
        return [min, max];
    }
    heatmapScale(data, middleZero) {
        let domain = this.valuesRange(data);
        if (middleZero) {
            const max = Math.max(Math.abs(domain[0]), Math.abs(domain[1]));
            domain = [-max, max];
        }
        const range = colors();
        return scaleQuantize().domain(domain).range(range);
    }
    valuesRange(traces) {
        if (traces.length === 0) {
            return [NaN, NaN];
        }
        let min = traces[0].min;
        let max = traces[0].max;
        traces.forEach(tr => {
            min = Math.min(min, tr.min);
            max = Math.max(max, tr.max);
        });
        return [min, max];
    }
    formatForDomain([min, max]) {
        const range = max - min;
        if (range < 1) {
            return format('.2~e');
        }
        if (range < 100) {
            return format('.2~f');
        }
        if (range < 100000) {
            return format('d');
        }
        return format('.2~e');
    }
    labelsColors(traces) {
        const size = traces.length;
        // tslint:disable-next-line:only-arrow-functions
        return function (i) {
            return interpolateSpectral(i / size);
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhdG1hcC1ncmFwaC11dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvYmQyLW5neC1oZWF0bWFwL3NyYy9saWIvaGVhdG1hcC1ncmFwaC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsY0FBYyxFQUEyQixNQUFNLG1CQUFtQixDQUFDO0FBQ25GLE9BQU8sRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFFLGFBQWEsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUMvRCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sY0FBYyxDQUFDO0FBQ3BDLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxXQUFXLENBQUM7QUFDakMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFdkQsTUFBTSxPQUFPLGdCQUFnQjtJQUUzQixxQkFBcUIsQ0FBQyxJQUFhLEVBQUUsV0FBOEIsRUFBRSxhQUFvQixLQUFLO1FBRTVGLE1BQU0sT0FBTyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7UUFFckMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxXQUFXLENBQUMsQ0FBQztRQUU3QyxJQUFJLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRWxDLE9BQU8sQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQyxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0lBRUQsbUJBQW1CLENBQUMsT0FBdUIsRUFBRSxJQUFXLEVBQUUsV0FBOEI7UUFFdEYs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Iiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtCb3hEZWYsIEdyYXBoaWNDb250ZXh0LCBMb29rQW5kRmVlbFNpemluZywgU2VyaWV9IGZyb20gJy4vYmQyLWhlYXRtYXAuZG9tJztcclxuaW1wb3J0IHtzY2FsZUJhbmQsIHNjYWxlTGluZWFyLCBzY2FsZVF1YW50aXplfSBmcm9tICdkMy1zY2FsZSc7XHJcbmltcG9ydCB7Y29sb3JzfSBmcm9tICcuL2NvbG9yLXV0aWwnO1xyXG5pbXBvcnQge2Zvcm1hdH0gZnJvbSAnZDMtZm9ybWF0JztcclxuaW1wb3J0IHtpbnRlcnBvbGF0ZVNwZWN0cmFsfSBmcm9tICdkMy1zY2FsZS1jaHJvbWF0aWMnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhlYXRtYXBHcmFwaFV0aWwge1xyXG5cclxuICBwcmVwYXJlR3JhcGhpY0NvbnRleHQoZGF0YTogU2VyaWVbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsU2l6aW5nLCBtaWRkbGVaZXJvOiBib29sZWFuPWZhbHNlKTogR3JhcGhpY0NvbnRleHQge1xyXG5cclxuICAgIGNvbnN0IGNvbnRleHQgPSBuZXcgR3JhcGhpY0NvbnRleHQoKTtcclxuXHJcbiAgICB0aGlzLmNhbGN1bGF0ZURpbWVuc2lvbnMoY29udGV4dCwgZGF0YSwgbG9va0FuZEZlZWwpO1xyXG4gICAgdGhpcy5hZGRQYW5lQXR0cmlidXRlcyhjb250ZXh0LCBsb29rQW5kRmVlbCk7XHJcblxyXG4gICAgdGhpcy5hZGRTY2FsZXMoY29udGV4dCwgZGF0YSwgbG9va0FuZEZlZWwsIG1pZGRsZVplcm8pO1xyXG4gICAgdGhpcy5hZGRGb3JtYXR0ZXJzKGNvbnRleHQsIGRhdGEpO1xyXG5cclxuICAgIGNvbnRleHQubGFiZWxzQ29sb3JzID0gdGhpcy5sYWJlbHNDb2xvcnMoZGF0YSk7XHJcbiAgICByZXR1cm4gY29udGV4dDtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZURpbWVuc2lvbnMoY29udGV4dDogR3JhcGhpY0NvbnRleHQsIGRhdGE6IGFueVtdLCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWxTaXppbmcpIHtcclxuXHJcbiAgICBjb250ZXh0LnBXaWR0aCA9IDUwMDtcclxuICAgIGNvbnRleHQud29ya3NwYWNlV2lkdGggPSBjb250ZXh0LnBXaWR0aCAtIDMgKiBsb29rQW5kRmVlbC5oTWFyZ2luO1xyXG5cclxuICAgIGNvbnRleHQud29ya3NwYWNlSGVpZ2h0ID0gdGhpcy5jYWxjdWxhdGVXb3Jrc3BhY2VIZWlnaHQoZGF0YSwgbG9va0FuZEZlZWwpO1xyXG4gICAgY29udGV4dC5wSGVpZ2h0ID0gY29udGV4dC53b3Jrc3BhY2VIZWlnaHQgKyAyICogbG9va0FuZEZlZWwudk1hcmdpbjtcclxuICB9XHJcblxyXG4gIGNhbGN1bGF0ZVdvcmtzcGFjZUhlaWdodChkYXRhOiBhbnlbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsU2l6aW5nKSB7XHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPD0gMjUpIHtcclxuICAgICAgcmV0dXJuIGRhdGEubGVuZ3RoICogbG9va0FuZEZlZWwuYmlnUm93V2lkdGg7XHJcbiAgICB9XHJcbiAgICBpZiAoZGF0YS5sZW5ndGggPD0gMTAwKSB7XHJcbiAgICAgIHJldHVybiBkYXRhLmxlbmd0aCAqIGxvb2tBbmRGZWVsLm1pZFJvd1dpZHRoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGRhdGEubGVuZ3RoICogbG9va0FuZEZlZWwuc21hbGxSb3dXaWR0aDtcclxuICB9XHJcblxyXG4gIGFkZFBhbmVBdHRyaWJ1dGVzKGNvbnRleHQ6IEdyYXBoaWNDb250ZXh0LCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWxTaXppbmcpIHtcclxuICAgIGNvbnRleHQudmlld0JveCA9IGAwIDAgNTAwICR7Y29udGV4dC5wSGVpZ2h0fWA7XHJcblxyXG4gICAgY29udGV4dC5tYWluUGFuZVRyYW5zZm9ybSA9IGB0cmFuc2xhdGUoJHsyICogbG9va0FuZEZlZWwuaE1hcmdpbn0sICR7bG9va0FuZEZlZWwudk1hcmdpbn0pYDtcclxuICB9XHJcblxyXG4gIGFkZFNjYWxlcyhjb250ZXh0OiBHcmFwaGljQ29udGV4dCwgZGF0YTogU2VyaWVbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsU2l6aW5nLCBtaWRkbGVaZXJvOiBib29sZWFuKSB7XHJcblxyXG4gICAgbGV0IHRpbWVEb21haW4gPSB0aGlzLnRpbWVEb21haW4oZGF0YSk7XHJcbiAgICBjb250ZXh0LnhEb21haW4gPSB0aW1lRG9tYWluO1xyXG5cclxuICAgIGNvbnN0IG1hcmdpbiA9IHRoaXMudGltZU1hcmdpbihkYXRhLCB0aW1lRG9tYWluKTtcclxuICAgIHRpbWVEb21haW4gPSBbdGltZURvbWFpblswXSAtIG1hcmdpbiwgdGltZURvbWFpblsxXSArIG1hcmdpbl07XHJcblxyXG4gICAgY29udGV4dC54U2NhbGUgPSBzY2FsZUxpbmVhcigpXHJcbiAgICAgIC5jbGFtcCh0cnVlKVxyXG4gICAgICAuZG9tYWluKHRpbWVEb21haW4pXHJcbiAgICAgIC5yYW5nZShbMCwgY29udGV4dC53b3Jrc3BhY2VXaWR0aF0pO1xyXG5cclxuICAgIGNvbnN0IHlEb21haW4gPSBkYXRhLm1hcChzID0+IHMua2V5KTtcclxuICAgIGNvbnRleHQueURvbWFpbiA9IHlEb21haW47XHJcblxyXG4gICAgY29udGV4dC55U2NhbGUgPSBzY2FsZUJhbmQoKVxyXG4gICAgICAucGFkZGluZ0lubmVyKGxvb2tBbmRGZWVsLnJvd0dhcClcclxuICAgICAgLnBhZGRpbmdPdXRlcigwKVxyXG4gICAgICAuZG9tYWluKHlEb21haW4pXHJcbiAgICAgIC5yYW5nZShbMCwgY29udGV4dC53b3Jrc3BhY2VIZWlnaHRdKTtcclxuXHJcbiAgICBjb250ZXh0LmNvbG9yU2NhbGUgPSB0aGlzLmhlYXRtYXBTY2FsZShkYXRhLCBtaWRkbGVaZXJvKTtcclxuXHJcblxyXG4gIH1cclxuXHJcbiAgYWRkRm9ybWF0dGVycyhjb250ZXh0OiBHcmFwaGljQ29udGV4dCwgZGF0YTogU2VyaWVbXSkge1xyXG4gICAgY29uc3QgdGltZURvbWFpbiA9IHRoaXMudGltZURvbWFpbihkYXRhKTtcclxuICAgIGNvbnRleHQuZG9tYWluRm9ybWF0dGVyID0gdGhpcy5mb3JtYXRGb3JEb21haW4odGltZURvbWFpbik7XHJcblxyXG4gICAgY29uc3QgdmFsdWVzUmFuZ2UgPSB0aGlzLnZhbHVlc1JhbmdlKGRhdGEpO1xyXG4gICAgY29udGV4dC52YWx1ZXNGb3JtYXR0ZXIgPSB0aGlzLmZvcm1hdEZvckRvbWFpbih2YWx1ZXNSYW5nZSk7XHJcbiAgfVxyXG5cclxuICB0aW1lTWFyZ2luKGRhdGE6IFNlcmllW10sIHRpbWVEb21haW46IFtudW1iZXIsIG51bWJlcl0pIHtcclxuXHJcbiAgICBjb25zdCBtaW4gPSB0aW1lRG9tYWluWzBdO1xyXG4gICAgbGV0IG1hcmdpbiA9IDAuNTtcclxuXHJcbiAgICBkYXRhLmZpbHRlciggc2VyaWUgPT4gc2VyaWUuZGF0YSAmJiBzZXJpZS5kYXRhLmxlbmd0aCA+IDAgJiYgc2VyaWUuZGF0YVswXS54ID09PSBtaW4pXHJcbiAgICAgICAgLmZvckVhY2goc2VyaWUgPT4ge1xyXG4gICAgICAgICAgY29uc3QgcCA9IHNlcmllLmRhdGFbMF07XHJcbiAgICAgICAgICBpZiAocCBpbnN0YW5jZW9mIEJveERlZikge1xyXG4gICAgICAgICAgICBtYXJnaW4gPSBNYXRoLm1heChtYXJnaW4sIHAueCAtIHAubGVmdCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIG1hcmdpbjtcclxuICB9XHJcblxyXG4gIHRpbWVEb21haW4oZGF0YTogU2VyaWVbXSk6IFtudW1iZXIsIG51bWJlcl0ge1xyXG5cclxuICAgIGxldCBtaW4gPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICBsZXQgbWF4ID0gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZO1xyXG5cclxuICAgIGRhdGEuZm9yRWFjaChzZXJpZSA9PiB7XHJcbiAgICAgIGlmIChzZXJpZS5kYXRhICYmIHNlcmllLmRhdGEubGVuZ3RoID4gMCkge1xyXG4gICAgICAgIG1pbiA9IE1hdGgubWluKG1pbiwgc2VyaWUuZGF0YVswXS54KTtcclxuICAgICAgICBtYXggPSBNYXRoLm1heChtYXgsIHNlcmllLmRhdGFbc2VyaWUuZGF0YS5sZW5ndGggLSAxXS54KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbWluID0gaXNGaW5pdGUobWluKSA/IG1pbiA6IDA7XHJcbiAgICBtYXggPSBpc0Zpbml0ZShtYXgpID8gbWF4IDogMTtcclxuXHJcbiAgICByZXR1cm4gW21pbiwgbWF4XTtcclxuXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIGhlYXRtYXBTY2FsZShkYXRhOiBTZXJpZVtdLCBtaWRkbGVaZXJvOiBib29sZWFuKSB7XHJcblxyXG4gICAgbGV0IGRvbWFpbiA9IHRoaXMudmFsdWVzUmFuZ2UoZGF0YSk7XHJcbiAgICBpZiAobWlkZGxlWmVybykge1xyXG4gICAgICBjb25zdCBtYXggPSBNYXRoLm1heChNYXRoLmFicyhkb21haW5bMF0pLCBNYXRoLmFicyhkb21haW5bMV0pKTtcclxuICAgICAgZG9tYWluID0gWy1tYXgsIG1heF07XHJcbiAgICB9XHJcbiAgICBjb25zdCByYW5nZSA9IGNvbG9ycygpO1xyXG5cclxuICAgIHJldHVybiBzY2FsZVF1YW50aXplPHN0cmluZz4oKS5kb21haW4oZG9tYWluKS5yYW5nZShyYW5nZSk7XHJcbiAgfVxyXG5cclxuICB2YWx1ZXNSYW5nZSh0cmFjZXM6IFNlcmllW10pOiBbbnVtYmVyLCBudW1iZXJdIHtcclxuXHJcbiAgICBpZiAodHJhY2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gW05hTiwgTmFOXTtcclxuICAgIH1cclxuICAgIGxldCBtaW4gPSB0cmFjZXNbMF0ubWluO1xyXG4gICAgbGV0IG1heCA9IHRyYWNlc1swXS5tYXg7XHJcblxyXG4gICAgdHJhY2VzLmZvckVhY2godHIgPT4ge1xyXG4gICAgICBtaW4gPSBNYXRoLm1pbihtaW4sIHRyLm1pbik7XHJcbiAgICAgIG1heCA9IE1hdGgubWF4KG1heCwgdHIubWF4KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHJldHVybiBbbWluLCBtYXhdO1xyXG4gIH1cclxuXHJcbiAgZm9ybWF0Rm9yRG9tYWluKFttaW4sIG1heF06IFtudW1iZXIsIG51bWJlcl0pIHtcclxuICAgIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xyXG4gICAgaWYgKHJhbmdlIDwgMSkge1xyXG4gICAgICByZXR1cm4gZm9ybWF0KCcuMn5lJyk7XHJcbiAgICB9XHJcbiAgICBpZiAocmFuZ2UgPCAxMDApIHtcclxuICAgICAgcmV0dXJuIGZvcm1hdCgnLjJ+ZicpO1xyXG4gICAgfVxyXG4gICAgaWYgKHJhbmdlIDwgMTAwMDAwKSB7XHJcbiAgICAgIHJldHVybiBmb3JtYXQoJ2QnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBmb3JtYXQoJy4yfmUnKTtcclxuICB9XHJcblxyXG4gIGxhYmVsc0NvbG9ycyh0cmFjZXM6IFNlcmllW10pIHtcclxuICAgIGNvbnN0IHNpemUgPSB0cmFjZXMubGVuZ3RoO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpvbmx5LWFycm93LWZ1bmN0aW9uc1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uKGk6IG51bWJlcikge1xyXG4gICAgICByZXR1cm4gaW50ZXJwb2xhdGVTcGVjdHJhbChpIC8gc2l6ZSk7XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG4iXX0=
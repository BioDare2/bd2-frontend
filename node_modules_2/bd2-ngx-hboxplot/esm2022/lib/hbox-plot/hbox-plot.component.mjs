import { Component, Input, ChangeDetectionStrategy, EventEmitter, Output } from '@angular/core';
import * as d3 from 'd3';
import { defualtLookAndFeel, GraphicContext, offsetScaleValue } from './hbox-plot.dom';
import { BoxUtil } from '../hbox-utils/box-util';
import { BD2ColorPalette } from '../hbox-utils/color-palette';
import { SmartRounder } from '../hbox-utils/smart-rounding';
import * as i0 from "@angular/core";
export class HBoxPlotComponent {
    set sorted(sorting) {
        if (sorting === 'median') {
            this.sortFunction = (b1, b2) => b1.median - b2.median;
        }
        else if (sorting === 'label') {
            // console.log("N",navigator.language);
            /*if (navigator.language) {
             this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) =>
             b1.label.localeCompare(b2.label, navigator.language, {sensitivity: 'case'});
             } else {
             this.sortFunction = (b1: BoxDefinition, b2: BoxDefinition) => b1.label.localeCompare(b2.label);
             };*/
            this.sortFunction = (b1, b2) => {
                if (b1.label === b2.label) {
                    return 0;
                }
                if (b1.label < b2.label) {
                    return -1;
                }
                return 1;
            };
        }
        else {
            this.sortFunction = (b1, b2) => b1.ix - b2.ix;
        }
    }
    constructor(ngZone, changeDetectorRef, element) {
        this.ngZone = ngZone;
        this.changeDetectorRef = changeDetectorRef;
        /**
         * Necessary to control hiding of the element, otherwise the BBoxes are not defined and labels
         * were not rendered in correct places.
         *
         */
        this.hidden = false;
        this.data = [];
        this.removed = [];
        this.domain = [17, 36];
        this.palette = [];
        this.labels = [];
        this.labelsOn = 'always'; // trigger //null
        this.lookAndFeel = defualtLookAndFeel();
        this.sortChanged = false;
        this.colors = new EventEmitter();
        this.graphicContext = new GraphicContext();
        this.boxUtil = new BoxUtil();
        this.sortFunction = function (b1, b2) {
            return b1.ix - b2.ix;
        };
        this.d3 = d3;
        this.parentNativeElement = element.nativeElement;
    }
    /**
     * It is detached from angular to prevent unnecessary change detection
     */
    ngAfterViewInit() {
        this.changeDetectorRef.detach();
        // console.log("AFI");
    }
    /**
     * Explicit triggers re-drawing as need to have all the parameters set (so will not redrawn if data came frist and domain later)
     * @param changes
     */
    ngOnChanges(changes) {
        // console.log("Changes", changes);
        // otherwise the hidden on inner div was not updated
        this.changeDetectorRef.detectChanges();
        this.initSVG();
        // this.handleHiding();
        if (!this.data) {
            return;
        }
        this.sortChanged = changes['sorted'] !== undefined;
        if (!this.hidden) {
            this.updatePlot();
        }
    }
    isDataUpdate(changes) {
        return (changes.data || changes.removed || changes.domain || changes.palette || changes.labels);
    }
    initSVG() {
        if (!this.d3Svg) {
            const d3ParentElement = this.d3.select(this.parentNativeElement);
            this.d3Svg = d3ParentElement.select('.hbox-plot').append('svg');
            this.d3Svg.attr('width', '0');
        }
    }
    ngOnInit() {
        if (this.parentNativeElement !== null) {
        }
        else {
            console.error('Missing parrent element for the component');
        }
    }
    ngOnDestroy() {
        if (this.d3Svg && this.d3Svg.empty && !this.d3Svg.empty()) {
            this.d3Svg.selectAll('*').remove();
        }
    }
    /**
     * Only for testing
     * @param context
     */
    testGraphicContext(context) {
        this.graphicContext = context;
    }
    /* Not needed any more, the hidding is achieved by simple div hidden attribute
     // and the problem with labels background rendering is solved using delayed rendering with a timer.
     handleHiding() {
     if (this.hidden) {
     this.removed = this.d3Svg.remove();
     } else {
     if (this.removed) {
     this.d3.select(this.parentNativeElement)
     .select('.hbox-plot')
     .append(() => this.d3Svg.node());
     this.removed = undefined;
     }
     }
  
     }*/
    updatePlot() {
        // this.graphicContext.transitionTime = this.lookAndFeel.transitionTime;
        if (this.lookAndFeel.transitionTime > 0) {
            this.graphicContext.transitionOn = true;
            this.ngZone.runOutsideAngular(() => {
                this.graphicContext.transition = this.d3.transition().duration(this.lookAndFeel.transitionTime);
            });
        }
        else {
            this.graphicContext.transitionOn = false;
            this.graphicContext.transition = undefined;
        }
        this.graphicContext = this.updatePalette(this.data, this.palette, this.graphicContext);
        let boxes = this.prepareDataModel(this.data, this.removed, this.labels, this.graphicContext.palette, this.domain, this.sortFunction);
        boxes = boxes.filter(b => !b.hidden);
        this.graphicContext = this.preparePane(boxes, this.lookAndFeel, this.graphicContext);
        this.graphicContext = this.prepareScales(boxes, this.domain, this.lookAndFeel, this.graphicContext);
        this.graphicContext = this.plotAxisBox(boxes, this.domain, this.lookAndFeel, this.mainPane, this.graphicContext);
        this.graphicContext = this.plotDataBoxes(boxes, this.lookAndFeel, this.mainPane, this.graphicContext);
        this.graphicContext = this.prepareTooltip(this.mainPane, this.graphicContext);
        this.graphicContext = this.prepareLabels(boxes, this.mainPane, this.lookAndFeel, this.graphicContext, this.labelsOn);
    }
    prepareDataModel(data, removed, labels, palette, domain, sortFunction) {
        let boxes = this.boxUtil.dataToBoxes(data);
        this.boxUtil.mockEmptyValues(boxes, domain[1]);
        this.labelBoxes(boxes, labels);
        this.colorBoxes(boxes, palette);
        removed.forEach(ix => {
            if (boxes[ix]) {
                boxes[ix].hidden = true;
            }
        });
        boxes = boxes.sort(sortFunction);
        return boxes;
    }
    updatePalette(data, palette, graphicContext) {
        if (!palette || palette.length === 0) {
            graphicContext.palette = BD2ColorPalette.palette(data.length);
        }
        else {
            graphicContext.palette = BD2ColorPalette.extendPalette(palette, data.length);
        }
        this.colors.next(graphicContext.palette.slice());
        return graphicContext;
    }
    colorBoxes(boxes, palette) {
        boxes.forEach(b => b.color = palette[b.ix]);
    }
    preparePane(data, lookAndFeel, graphicContext) {
        // console.log("PP",data);
        if (!this.mainPane) {
            // let d3ParentElement = this.d3.select(this.parentNativeElement);
            // this.d3Svg = d3ParentElement.select('.hbox-plot').append<SVGSVGElement>('svg');
            this.d3Svg.attr('width', '100%');
            this.mainPane = this.d3Svg.append('g');
            this.mainPane.classed('mainPane', true);
        }
        const pWidth = 500;
        const pHeight = this.calculateWorkspaceHeight(data, lookAndFeel) + 2 * lookAndFeel.vMargin;
        const elm = (graphicContext.transitionOn ? this.d3Svg.transition(graphicContext.transition) : this.d3Svg);
        elm.attr('viewBox', '0 0 ' + pWidth + ' ' + pHeight);
        this.mainPane.attr('transform', 'translate(' + lookAndFeel.hMarginL + ',' + lookAndFeel.vMargin + ')');
        // .attr('transform', 'translate(' + (pWidth / 2) + ',' + (pHeight / 2) + ')'); //moves 0,0 of the pain to the middle of the graphics
        graphicContext.workspaceWidth = pWidth - lookAndFeel.hMarginL - lookAndFeel.hMarginR;
        graphicContext.workspaceHeight = pHeight - 2 * lookAndFeel.vMargin;
        return graphicContext;
    }
    calculateWorkspaceHeight(data, lookAndFeel) {
        return lookAndFeel.rowWidth * data.length;
    }
    labelBoxes(boxes, labels) {
        if (!labels) {
            labels = [];
        }
        boxes.forEach((b, ix) => {
            b.label = labels[ix] ? labels[ix] : '' + (ix + 1);
        });
    }
    prepareLabels(boxes, mainPane, lookAndFeel, graphicContext, labelsOn) {
        if (!graphicContext.labelsWrapper) {
            graphicContext.labelsWrapper = mainPane.append('g')
                .classed('labelsWrapper', true);
        }
        if (!graphicContext.backLabelsWrapper) {
            graphicContext.backLabelsWrapper = mainPane.insert('g', 'g.dataWrapper')
                .classed('backLabelsWrapper', true);
        }
        const backLabelsOn = labelsOn === 'always';
        const mainLabelsOn = labelsOn === 'always' || labelsOn === 'trigger';
        const labels = graphicContext.labelsWrapper.selectAll('g.yLabel')
            .data(mainLabelsOn ? boxes : [], (d) => d.key);
        labels.exit().remove();
        const newLabels = labels.enter()
            .append('g')
            .classed('yLabel', true);
        this.ngZone.runOutsideAngular(() => {
            newLabels.on('mouseover', function (evnt, d) {
                d3.select(this)
                    .selectAll('.yLabel')
                    // .style("visibility", "visible");
                    .style('display', null);
            }).on('mouseout', function () {
                d3.select(this)
                    .selectAll('.yLabel')
                    // .style("visibility", "hidden");
                    .style('display', 'none');
            });
        });
        newLabels.append('rect')
            .attr('class', 'yTrigger')
            .style('fill-opacity', 1);
        newLabels.append('rect')
            .attr('class', 'yLabel')
            .style('fill-opacity', 0.35)
            // .style("visibility", "hidden");
            .style('display', 'none');
        newLabels.append('text')
            .attr('class', 'yLabel')
            .attr('text-anchor', 'left')
            .attr('dominant-baseline', 'central')
            .style('font-size', lookAndFeel.labelFont)
            .style('opacity', 1)
            .attr('x', 5);
        const backLabels = graphicContext.backLabelsWrapper.selectAll('g.yLabel')
            .data(backLabelsOn ? boxes : [], (d) => d.key);
        backLabels.exit().remove();
        const newBackLabels = backLabels.enter()
            .append('g')
            .classed('yLabel', true);
        /*
         newBackLabels.append<SVGGElement>("rect")
         .attr("class", "yLabel")
         .style("fill-opacity", 0.05);
         */
        newBackLabels.append('text')
            .attr('class', 'yLabel')
            .attr('text-anchor', 'left')
            .attr('dominant-baseline', 'central')
            .style('font-size', lookAndFeel.labelFont)
            .style('opacity', lookAndFeel.backLabelOpacity)
            .attr('x', 5);
        // .style("visibility", "hidden");
        const enterUpdate = newLabels.merge(labels);
        const backEnterUpdate = newBackLabels.merge(backLabels);
        // called with delay to allow, parent divs to component sets their visibility, otherwise the bboxes cannot be calculated
        // and the labels backgrounds and trigers are not rendered correctly
        // it is a hack, but don't know how to do it correctly
        // timers have to be cleared as otherwise saw errors in logs for fast changing input data (like cause by sorting and pagination)
        graphicContext.labelsTimers.forEach(timer => clearTimeout(timer));
        graphicContext.labelsTimers = [];
        const timer = setTimeout(() => {
            const bboxes = [];
            enterUpdate.select('text')
                .style('display', null)
                .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
                .text(d => d.label)
                .each(function (d) {
                bboxes.push(this.getBBox());
                // console.log("D: " + d.label, this.getBBox());
            })
                .style('display', 'none');
            let elm = backEnterUpdate.select('text');
            elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
            elm
                .attr('y', d => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
                .text(d => d.label);
            const trigers = enterUpdate.select('.yTrigger')
                .style('fill', d => d.color)
                .style('stroke', d => d.color);
            let telm = trigers.data(bboxes);
            telm = (graphicContext.transitionOn ? telm.transition(graphicContext.transition) : telm);
            telm
                .attr('x', -7)
                .attr('y', b => b.y - 3)
                .attr('width', b => 7)
                .attr('height', b => b.height + 6);
            const frames = enterUpdate.select('rect.yLabel')
                .style('fill', d => d.color)
                .style('fill-opacity', lookAndFeel.labelFillOpacity);
            frames.data(bboxes)
                .attr('x', 0)
                .attr('y', b => b.y - 3)
                .attr('width', b => b.width + 10)
                .attr('height', b => b.height + 7);
            /*
             let backFrames = backEnterUpdate.select<SVGSVGElement>("rect.yLabel")
             .style("fill", d => d.color);
      
             backFrames.data(bboxes)
             .attr("x", 0)
             .attr("y", b => b.y - 3)
             .attr("width", b => b.width + 10)
             .attr("height", b => b.height + 7);
             */
        }, 10);
        graphicContext.labelsTimers.push(timer);
        return graphicContext;
    }
    prepareTooltip(mainPane, graphicContext) {
        if (graphicContext.tooltipWrapper) {
            return graphicContext;
        }
        graphicContext.tooltipWrapper = mainPane.append('g')
            .classed('tooltipWrapper', true);
        graphicContext.tooltipBox = graphicContext.tooltipWrapper.append('rect')
            .style('fill', 'white')
            .style('fill-opacity', 0.8)
            .style('stroke', 'grey');
        graphicContext.tooltipText = graphicContext.tooltipWrapper.append('text')
            .attr('class', 'tooltip')
            // .attr("text-anchor", "left")
            .attr('text-anchor', 'middle')
            // .attr("alignment-baseline", "middle")
            // .attr("alignment-baseline", "baseline")
            // .attr("dy", "-10px")
            .style('opacity', 1);
        graphicContext.tooltipWrapper
            // .style("visibility", "hidden");
            .style('display', 'none');
        return graphicContext;
    }
    showTooltip(v, x, y) {
        // console.log("Show: " + v + ";" + this.constructor.name);
        // console.log('Show: ' + v + '; ' + x + ': ' + y);
        // console.log('v', SmartRounder.round(v));
        // console.log('x', this.graphicContext.xScale(x));
        // console.log('y', this.graphicContext.yScale(y));
        if (!this.graphicContext.tooltipText) {
            return;
        }
        this.graphicContext.tooltipText
            .attr('x', this.graphicContext.xScale(x))
            .attr('y', this.graphicContext.yScale(y))
            .text(SmartRounder.round(v));
        // I have to change the display here even before the box is ready as
        // in firefox the getBBox was not working if called with display none
        // giving NS_ERROR_FAILURE 2147500037
        this.graphicContext.tooltipWrapper
            // .style("visibility", "visible");
            .style('display', null);
        const bbox = this.graphicContext.tooltipText.node().getBBox();
        this.graphicContext.tooltipBox
            .attr('x', bbox.x - 3)
            .attr('y', bbox.y - 2)
            .attr('width', bbox.width + 6)
            .attr('height', bbox.height + 4);
    }
    hideTooltip() {
        // console.log("Hide: ");
        if (!this.graphicContext.tooltipText) {
            return;
        }
        this.graphicContext.tooltipWrapper
            // .style("visibility", "hidden");
            .style('display', 'none');
        // this.graphicContext.tooltipText
        // .transition().duration(this.lookAndFeel.baseTransitionsTime / 2)
        // .style("opacity", 0);
    }
    prepareScales(data, domain, lookAndFeel, graphicContext) {
        if (!graphicContext.xScale) {
            graphicContext.xScale = d3.scaleLinear()
                .clamp(true);
        }
        graphicContext.xScale
            .domain(domain)
            .range([0, graphicContext.workspaceWidth]);
        if (!graphicContext.yScale) {
            graphicContext.yScale = d3.scaleBand()
                .padding(lookAndFeel.rowGap);
        }
        const domainY = data.map((d) => d.key);
        graphicContext.yScale
            .domain(domainY)
            .range([0, graphicContext.workspaceHeight]);
        return graphicContext;
    }
    plotAxisBox(data, domain, lookAndFeel, mainPane, graphicContext) {
        if (!graphicContext.axisWrapper) {
            graphicContext.axisWrapper = this.initAxisWrapper(mainPane);
        }
        graphicContext = this.plotHorizontalScales(domain, lookAndFeel, graphicContext);
        graphicContext = this.plotVerticalScales(data, lookAndFeel, graphicContext);
        return graphicContext;
    }
    initAxisWrapper(mainPane) {
        let wrapper = mainPane.select('.axisWrapper');
        if (wrapper.size() === 0) {
            wrapper = mainPane.append('g').attr('class', 'axisWrapper');
            wrapper.append('g').attr('class', 'xTopAxis');
            wrapper.append('g').attr('class', 'xBottomAxis');
            wrapper.append('g').attr('class', 'yLeftAxis');
            wrapper.append('g').attr('class', 'yRightAxis');
        }
        return wrapper;
    }
    plotHorizontalScales(domain, lookAndFeel, graphicContext) {
        if (!graphicContext.xTopAxis) {
            graphicContext.xTopAxis = d3.axisTop(graphicContext.xScale);
        }
        if (!graphicContext.xBottomAxis) {
            graphicContext.xBottomAxis = d3.axisBottom(graphicContext.xScale);
        }
        let elmT = graphicContext.axisWrapper.select('g.xTopAxis');
        elmT.call(graphicContext.xTopAxis);
        let elmB = graphicContext.axisWrapper.select('g.xBottomAxis');
        elmB = (graphicContext.transitionOn ? elmB.transition(graphicContext.transition) : elmB);
        elmB
            .attr('transform', 'translate(0,' + graphicContext.workspaceHeight + ')')
            .call(graphicContext.xBottomAxis);
        return graphicContext;
    }
    plotVerticalScales(data, lookAndFeel, graphicContext) {
        if (!graphicContext.yLeftAxis) {
            graphicContext.yLeftAxis = d3.axisLeft(graphicContext.yScale)
                .tickFormat(() => '');
        }
        if (!graphicContext.yRightAxis) {
            graphicContext.yRightAxis = d3.axisRight(graphicContext.yScale)
                .tickValues([]);
        }
        let elm = graphicContext.axisWrapper.select('g.yLeftAxis');
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .call(graphicContext.yLeftAxis);
        elm = graphicContext.axisWrapper.select('g.yRightAxis')
            .attr('transform', 'translate(' + graphicContext.workspaceWidth + ',0)');
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .call(graphicContext.yRightAxis);
        return graphicContext;
    }
    plotDataBoxes(boxes, lookAndFeel, mainPane, graphicContext) {
        if (!graphicContext.dataWrapper) {
            graphicContext.dataWrapper = mainPane.append('g').attr('class', 'dataWrapper');
        }
        let boxWidgets = graphicContext.dataWrapper.selectAll('.boxWidget');
        boxWidgets = boxWidgets.data(boxes, d => d.key);
        this.updateBoxWidgets(boxWidgets, lookAndFeel, graphicContext);
        const newBoxWidgets = boxWidgets.enter()
            .append('g').attr('class', 'boxWidget');
        this.createBoxWidgets(newBoxWidgets, lookAndFeel, graphicContext);
        boxWidgets.exit().remove();
        return graphicContext;
    }
    updateBoxWidgets(boxWidgets, lookAndFeel, graphicContext) {
        // this.ngZone.runOutsideAngular(() => {
        boxWidgets.select('rect.backdrop')
            .call(this.positionBackdrop, graphicContext);
        this.updateWhiskers(boxWidgets.select('g.whiskers'), graphicContext);
        boxWidgets.select('g.box rect')
            .call(this.positionBoxRectangle, graphicContext);
        boxWidgets.select('g.box line.medianline')
            .call(this.positionMedianLine, graphicContext);
        boxWidgets.select('g.box line.meanline')
            .call(this.positionMeanLine, graphicContext);
        const out = boxWidgets.select('g.outliers').selectAll('.outlier')
            .data(d => d.outliers.map(x => [x, d.key, d.color]));
        out.enter()
            .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier);
        out.call(this.positionOutlier, graphicContext);
        out.exit().remove();
        // });
    }
    positionBackdrop(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x', (d) => offsetScaleValue(d.lowWskr, -5, graphicContext.xScale))
            .attr('y', (d) => {
            return graphicContext.yScale(d.key);
        })
            .attr('width', (d) => {
            const x1 = offsetScaleValue(d.lowWskr, -5, graphicContext.xScale);
            const x2 = offsetScaleValue(d.highWskr, +5, graphicContext.xScale);
            return x2 - x1;
        })
            .attr('height', (d) => {
            return graphicContext.yScale.bandwidth();
        });
    }
    positionBoxRectangle(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x', (d) => graphicContext.xScale(d.fstQnt))
            .attr('y', (d) => {
            return graphicContext.yScale(d.key);
        })
            .attr('width', (d) => (graphicContext.xScale(d.thrdQnt) - graphicContext.xScale(d.fstQnt)))
            .attr('height', (d) => {
            return graphicContext.yScale.bandwidth();
        })
            .style('stroke', d => d.color)
            .style('fill', d => d.color);
    }
    positionMedianLine(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => graphicContext.xScale(d.median))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => graphicContext.xScale(d.median))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color)
            // .style("visibility", d => d.mean === d.median ? "hidden" : "visible");
            .style('display', d => d.mean === d.median ? 'none' : null);
    }
    positionMeanLine(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => graphicContext.xScale(d.mean))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => graphicContext.xScale(d.mean))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color);
    }
    positionOutlier(elm, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm.attr('cx', d => graphicContext.xScale(d[0]))
            .attr('cy', d => graphicContext.yScale(d[1]) + graphicContext.yScale.bandwidth() / 2)
            .style('stroke', d => d[2])
            .style('fill', d => d[2]);
    }
    createOutlier(elm, lookAndFeel, graphicContext, positionOutlierFunction) {
        elm
            .append('circle')
            .attr('class', 'outlier')
            .attr('r', lookAndFeel.outliersCircleRadius)
            .style('stroke-width', lookAndFeel.outliersStrokeWidth)
            .style('fill-opacity', lookAndFeel.outliersFillOpacity)
            .call(positionOutlierFunction, graphicContext);
    }
    positionWhiskerLine(elm, left, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.thrdQnt))
            .attr('y1', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
            .attr('x2', (d, i) => left ? graphicContext.xScale(d.fstQnt) : graphicContext.xScale(d.highWskr))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth() / 2)
            .style('stroke', d => d.color)
            // .style("visibility", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? "hidden" : "visible");
            .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);
    }
    positionWhiskerTip(elm, left, graphicContext) {
        elm = (graphicContext.transitionOn ? elm.transition(graphicContext.transition) : elm);
        elm
            .attr('x1', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))
            .attr('y1', (d, i) => graphicContext.yScale(d.key))
            .attr('x2', (d, i) => left ? graphicContext.xScale(d.lowWskr) : graphicContext.xScale(d.highWskr))
            .attr('y2', (d, i) => graphicContext.yScale(d.key) + graphicContext.yScale.bandwidth())
            .style('stroke', d => d.color)
            // .style("visibility", d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? "hidden" : "visible");
            .style('display', d => (left && (d.lowWskr === d.fstQnt)) || (!left && (d.highWskr === d.thrdQnt)) ? 'none' : null);
    }
    updateWhiskers(whiskers, graphicContext) {
        whiskers.select('line.whiskerlineL')
            .call(this.positionWhiskerLine, true, graphicContext);
        whiskers.select('line.whiskerlineR')
            .call(this.positionWhiskerLine, false, graphicContext);
        whiskers.select('line.whiskertipL')
            .call(this.positionWhiskerTip, true, graphicContext);
        whiskers.select('line.whiskertipR')
            .call(this.positionWhiskerTip, false, graphicContext);
    }
    createWhiskers(whiskers, lookAndFeel, graphicContext) {
        const lwhiskr = whiskers.append('line')
            .attr('class', 'whiskerlineL')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .style('stroke-dasharray', '4 3')
            .call(this.positionWhiskerLine, true, graphicContext);
        const rwhiskr = whiskers.append('line')
            .attr('class', 'whiskerlineR')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .style('stroke-dasharray', '4 3')
            .call(this.positionWhiskerLine, false, graphicContext);
        const lTip = whiskers.append('line')
            .attr('class', 'whiskertipL')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .call(this.positionWhiskerTip, true, graphicContext);
        const rTip = whiskers.append('line')
            .attr('class', 'whiskertipR')
            .style('stroke-width', lookAndFeel.whiskerStrokeWidth)
            .call(this.positionWhiskerTip, false, graphicContext);
    }
    createBoxes(widgets, lookAndFeel, graphicContext) {
        const rect = widgets.append('rect')
            .attr('class', 'box')
            .style('stroke-width', lookAndFeel.boxStrokeWidth)
            .style('fill-opacity', lookAndFeel.boxFillOpacity)
            .call(this.positionBoxRectangle, graphicContext);
        const median = widgets.append('line')
            .attr('class', 'medianline')
            .style('stroke-width', lookAndFeel.boxStrokeWidth)
            .call(this.positionMedianLine, graphicContext);
        const instance = this;
        this.ngZone.runOutsideAngular(() => {
            rect.on('mouseover', function (evnt, d) {
                instance.showTooltip(d.median, d.median, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
            median.on('mouseover', function (evnt, d) {
                instance.showTooltip(d.median, d.median, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
        });
        const mean = widgets
            .append('line')
            .attr('class', 'meanline')
            .style('stroke-width', lookAndFeel.meanStrokeWidth)
            .style('stroke-dasharray', '4 2')
            .call(this.positionMeanLine, graphicContext);
        // has to be outside angular, to prevent detection
        this.ngZone.runOutsideAngular(() => {
            mean
                .on('mouseover', function (evnt, d) {
                instance.showTooltip(d.mean, d.mean, d.key);
            })
                .on('mouseout', function () {
                instance.hideTooltip();
            });
        });
    }
    createBoxWidgets(newBoxWidgets, lookAndFeel, graphicContext) {
        // this.ngZone.runOutsideAngular(() => {
        const instance = this;
        const backdrops = newBoxWidgets.append('rect').attr('class', 'backdrop')
            // .style("stroke-width", lookAndFeel.boxStrokeWidth)
            .style('fill-opacity', lookAndFeel.backdropOpacity)
            .style('fill', lookAndFeel.backdropColor)
            .call(this.positionBackdrop, graphicContext);
        const whiskers = newBoxWidgets.append('g').attr('class', 'whiskers');
        this.createWhiskers(whiskers, lookAndFeel, graphicContext);
        const boxes = newBoxWidgets.append('g').attr('class', 'box');
        this.createBoxes(boxes, lookAndFeel, graphicContext);
        const outliers = newBoxWidgets.append('g').attr('class', 'outliers');
        outliers.selectAll('.outlier')
            .data(d => d.outliers.map(x => [x, d.key, d.color]))
            .enter()
            .call(this.createOutlier, lookAndFeel, graphicContext, this.positionOutlier);
        // });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: HBoxPlotComponent, deps: [{ token: i0.NgZone }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.12", type: HBoxPlotComponent, selector: "bd2-ngx-hbox-plot", inputs: { hidden: "hidden", data: "data", removed: "removed", domain: "domain", palette: "palette", labels: "labels", labelsOn: "labelsOn", lookAndFeel: "lookAndFeel", sorted: "sorted" }, outputs: { colors: "colors" }, usesOnChanges: true, ngImport: i0, template: `
    <div class="hbox-plot" [hidden]="hidden"></div>
  `, isInline: true, styles: [":host ::ng-deep .axisWrapper path{stroke:gray}:host ::ng-deep .axisWrapper line{stroke:gray}:host ::ng-deep .axisWrapper text{fill:gray}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.12", ngImport: i0, type: HBoxPlotComponent, decorators: [{
            type: Component,
            args: [{ selector: 'bd2-ngx-hbox-plot', changeDetection: ChangeDetectionStrategy.OnPush, template: `
    <div class="hbox-plot" [hidden]="hidden"></div>
  `, styles: [":host ::ng-deep .axisWrapper path{stroke:gray}:host ::ng-deep .axisWrapper line{stroke:gray}:host ::ng-deep .axisWrapper text{fill:gray}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { hidden: [{
                type: Input
            }], data: [{
                type: Input
            }], removed: [{
                type: Input
            }], domain: [{
                type: Input
            }], palette: [{
                type: Input
            }], labels: [{
                type: Input
            }], labelsOn: [{
                type: Input
            }], lookAndFeel: [{
                type: Input
            }], sorted: [{
                type: Input
            }], colors: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGJveC1wbG90LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JkMi1uZ3gtaGJveHBsb3Qvc3JjL2xpYi9oYm94LXBsb3QvaGJveC1wbG90LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsU0FBUyxFQUFVLEtBQUssRUFDRyx1QkFBdUIsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUN6RSxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUd6QixPQUFPLEVBQUMsa0JBQWtCLEVBQUUsY0FBYyxFQUFlLGdCQUFnQixFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFbEcsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUM1RCxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sOEJBQThCLENBQUM7O0FBNEIxRCxNQUFNLE9BQU8saUJBQWlCO0lBZ0M1QixJQUNJLE1BQU0sQ0FBQyxPQUFlO1FBRXhCLElBQUksT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN4QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsRUFBaUIsRUFBRSxFQUFpQixFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUM7U0FDckY7YUFBTSxJQUFJLE9BQU8sS0FBSyxPQUFPLEVBQUU7WUFDOUIsdUNBQXVDO1lBQ3ZDOzs7OztpQkFLSztZQUNMLElBQUksQ0FBQyxZQUFZLEdBQUcsQ0FBQyxFQUFpQixFQUFFLEVBQWlCLEVBQUUsRUFBRTtnQkFDM0QsSUFBSSxFQUFFLENBQUMsS0FBSyxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUU7b0JBQ3pCLE9BQU8sQ0FBQyxDQUFDO2lCQUNWO2dCQUNELElBQUksRUFBRSxD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QlUsaUJBQWlCO21HQUFqQixpQkFBaUIseVNBbkJsQjs7R0FFVDs7NEZBaUJVLGlCQUFpQjtrQkF0QjdCLFNBQVM7K0JBQ0UsbUJBQW1CLG1CQUNaLHVCQUF1QixDQUFDLE1BQU0sWUFDckM7O0dBRVQ7c0pBeUJELE1BQU07c0JBREwsS0FBSztnQkFLTixJQUFJO3NCQURILEtBQUs7Z0JBSU4sT0FBTztzQkFETixLQUFLO2dCQUlOLE1BQU07c0JBREwsS0FBSztnQkFJTixPQUFPO3NCQUROLEtBQUs7Z0JBSU4sTUFBTTtzQkFETCxLQUFLO2dCQUlOLFFBQVE7c0JBRFAsS0FBSztnQkFJTixXQUFXO3NCQURWLEtBQUs7Z0JBSUYsTUFBTTtzQkFEVCxLQUFLO2dCQStCTixNQUFNO3NCQURMLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gIENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE5nWm9uZSwgQ2hhbmdlRGV0ZWN0b3JSZWYsXHJcbiAgRWxlbWVudFJlZiwgU2ltcGxlQ2hhbmdlcywgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIEV2ZW50RW1pdHRlciwgT3V0cHV0XHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJztcclxuXHJcbmltcG9ydCB7U2VsZWN0aW9ufSBmcm9tICdkMyc7XHJcbmltcG9ydCB7ZGVmdWFsdExvb2tBbmRGZWVsLCBHcmFwaGljQ29udGV4dCwgTG9va0FuZEZlZWwsIG9mZnNldFNjYWxlVmFsdWV9IGZyb20gJy4vaGJveC1wbG90LmRvbSc7XHJcbmltcG9ydCB7Qm94RGVmaW5pdGlvbn0gZnJvbSAnLi4vaGJveC11dGlscy9ib3gtZG9tJztcclxuaW1wb3J0IHtCb3hVdGlsfSBmcm9tICcuLi9oYm94LXV0aWxzL2JveC11dGlsJztcclxuaW1wb3J0IHtCRDJDb2xvclBhbGV0dGV9IGZyb20gJy4uL2hib3gtdXRpbHMvY29sb3ItcGFsZXR0ZSc7XHJcbmltcG9ydCB7U21hcnRSb3VuZGVyfSBmcm9tICcuLi9oYm94LXV0aWxzL3NtYXJ0LXJvdW5kaW5nJztcclxuXHJcblxyXG5cclxuXHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2JkMi1uZ3gtaGJveC1wbG90JyxcclxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcclxuICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImhib3gtcGxvdFwiIFtoaWRkZW5dPVwiaGlkZGVuXCI+PC9kaXY+XHJcbiAgYCxcclxuICBzdHlsZXM6IFtcclxuICAgICAgYFxyXG4gICAgICA6aG9zdCA6Om5nLWRlZXAgLmF4aXNXcmFwcGVyIHBhdGgge1xyXG4gICAgICAgIHN0cm9rZTogZ3JheTtcclxuICAgICAgfVxyXG5cclxuICAgICAgOmhvc3QgOjpuZy1kZWVwIC5heGlzV3JhcHBlciBsaW5lIHtcclxuICAgICAgICBzdHJva2U6IGdyYXk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIDpob3N0IDo6bmctZGVlcCAuYXhpc1dyYXBwZXIgdGV4dCB7XHJcbiAgICAgICAgZmlsbDogZ3JheTtcclxuICAgICAgfVxyXG4gICAgYFxyXG4gIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEhCb3hQbG90Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIE5lY2Vzc2FyeSB0byBjb250cm9sIGhpZGluZyBvZiB0aGUgZWxlbWVudCwgb3RoZXJ3aXNlIHRoZSBCQm94ZXMgYXJlIG5vdCBkZWZpbmVkIGFuZCBsYWJlbHNcclxuICAgKiB3ZXJlIG5vdCByZW5kZXJlZCBpbiBjb3JyZWN0IHBsYWNlcy5cclxuICAgKlxyXG4gICAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgaGlkZGVuID0gZmFsc2U7XHJcblxyXG5cclxuICBASW5wdXQoKVxyXG4gIGRhdGE6IG51bWJlcltdW10gPSBbXTtcclxuXHJcbiAgQElucHV0KClcclxuICByZW1vdmVkOiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGRvbWFpbjogbnVtYmVyW10gPSBbMTcsIDM2XTtcclxuXHJcbiAgQElucHV0KClcclxuICBwYWxldHRlOiBzdHJpbmdbXSA9IFtdO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIGxhYmVsczogc3RyaW5nW10gPSBbXTtcclxuXHJcbiAgQElucHV0KClcclxuICBsYWJlbHNPbiA9ICdhbHdheXMnOyAvLyB0cmlnZ2VyIC8vbnVsbFxyXG5cclxuICBASW5wdXQoKVxyXG4gIGxvb2tBbmRGZWVsID0gZGVmdWFsdExvb2tBbmRGZWVsKCk7XHJcblxyXG4gIEBJbnB1dCgpIC8vIG1lZGlhbiwgbGFiZWwsIG51bGxcclxuICBzZXQgc29ydGVkKHNvcnRpbmc6IHN0cmluZykge1xyXG5cclxuICAgIGlmIChzb3J0aW5nID09PSAnbWVkaWFuJykge1xyXG4gICAgICB0aGlzLnNvcnRGdW5jdGlvbiA9IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+IGIxLm1lZGlhbiAtIGIyLm1lZGlhbjtcclxuICAgIH0gZWxzZSBpZiAoc29ydGluZyA9PT0gJ2xhYmVsJykge1xyXG4gICAgICAvLyBjb25zb2xlLmxvZyhcIk5cIixuYXZpZ2F0b3IubGFuZ3VhZ2UpO1xyXG4gICAgICAvKmlmIChuYXZpZ2F0b3IubGFuZ3VhZ2UpIHtcclxuICAgICAgIHRoaXMuc29ydEZ1bmN0aW9uID0gKGIxOiBCb3hEZWZpbml0aW9uLCBiMjogQm94RGVmaW5pdGlvbikgPT5cclxuICAgICAgIGIxLmxhYmVsLmxvY2FsZUNvbXBhcmUoYjIubGFiZWwsIG5hdmlnYXRvci5sYW5ndWFnZSwge3NlbnNpdGl2aXR5OiAnY2FzZSd9KTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICB0aGlzLnNvcnRGdW5jdGlvbiA9IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+IGIxLmxhYmVsLmxvY2FsZUNvbXBhcmUoYjIubGFiZWwpO1xyXG4gICAgICAgfTsqL1xyXG4gICAgICB0aGlzLnNvcnRGdW5jdGlvbiA9IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+IHtcclxuICAgICAgICBpZiAoYjEubGFiZWwgPT09IGIyLmxhYmVsKSB7XHJcbiAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGIxLmxhYmVsIDwgYjIubGFiZWwpIHtcclxuICAgICAgICAgIHJldHVybiAtMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIDE7XHJcbiAgICAgIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNvcnRGdW5jdGlvbiA9IChiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pID0+IGIxLml4IC0gYjIuaXg7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgc29ydENoYW5nZWQgPSBmYWxzZTtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgY29sb3JzID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmdbXT4oKTtcclxuXHJcbiAgcHJpdmF0ZSBkMztcclxuICBwcml2YXRlIHBhcmVudE5hdGl2ZUVsZW1lbnQ6IGFueTtcclxuICBwcml2YXRlIGQzU3ZnOiBTZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+O1xyXG4gIC8vIHByaXZhdGUgcmVtb3ZlZFNWRzogU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPjtcclxuXHJcbiAgcHJpdmF0ZSBtYWluUGFuZTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD47XHJcblxyXG4gIHByaXZhdGUgZ3JhcGhpY0NvbnRleHQgPSBuZXcgR3JhcGhpY0NvbnRleHQoKTtcclxuICBwcml2YXRlIGJveFV0aWwgPSBuZXcgQm94VXRpbCgpO1xyXG5cclxuICBzb3J0RnVuY3Rpb24gPSBmdW5jdGlvbihiMTogQm94RGVmaW5pdGlvbiwgYjI6IEJveERlZmluaXRpb24pIHtcclxuICAgIHJldHVybiBiMS5peCAtIGIyLml4O1xyXG4gIH07XHJcblxyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBwcml2YXRlIGNoYW5nZURldGVjdG9yUmVmOiBDaGFuZ2VEZXRlY3RvclJlZiwgZWxlbWVudDogRWxlbWVudFJlZikge1xyXG4gICAgdGhpcy5kMyA9IGQzO1xyXG4gICAgdGhpcy5wYXJlbnROYXRpdmVFbGVtZW50ID0gZWxlbWVudC5uYXRpdmVFbGVtZW50O1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEl0IGlzIGRldGFjaGVkIGZyb20gYW5ndWxhciB0byBwcmV2ZW50IHVubmVjZXNzYXJ5IGNoYW5nZSBkZXRlY3Rpb25cclxuICAgKi9cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGFjaCgpO1xyXG4gICAgLy8gY29uc29sZS5sb2coXCJBRklcIik7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeHBsaWNpdCB0cmlnZ2VycyByZS1kcmF3aW5nIGFzIG5lZWQgdG8gaGF2ZSBhbGwgdGhlIHBhcmFtZXRlcnMgc2V0IChzbyB3aWxsIG5vdCByZWRyYXduIGlmIGRhdGEgY2FtZSBmcmlzdCBhbmQgZG9tYWluIGxhdGVyKVxyXG4gICAqIEBwYXJhbSBjaGFuZ2VzXHJcbiAgICovXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKFwiQ2hhbmdlc1wiLCBjaGFuZ2VzKTtcclxuXHJcbiAgICAvLyBvdGhlcndpc2UgdGhlIGhpZGRlbiBvbiBpbm5lciBkaXYgd2FzIG5vdCB1cGRhdGVkXHJcbiAgICB0aGlzLmNoYW5nZURldGVjdG9yUmVmLmRldGVjdENoYW5nZXMoKTtcclxuXHJcblxyXG4gICAgdGhpcy5pbml0U1ZHKCk7XHJcblxyXG4gICAgLy8gdGhpcy5oYW5kbGVIaWRpbmcoKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZGF0YSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zb3J0Q2hhbmdlZCA9IGNoYW5nZXNbJ3NvcnRlZCddICE9PSB1bmRlZmluZWQ7XHJcblxyXG4gICAgaWYgKCF0aGlzLmhpZGRlbikge1xyXG4gICAgICB0aGlzLnVwZGF0ZVBsb3QoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGlzRGF0YVVwZGF0ZShjaGFuZ2VzOiBhbnkpOiBib29sZWFuIHtcclxuXHJcbiAgICByZXR1cm4gKGNoYW5nZXMuZGF0YSB8fCBjaGFuZ2VzLnJlbW92ZWQgfHwgY2hhbmdlcy5kb21haW4gfHwgY2hhbmdlcy5wYWxldHRlIHx8IGNoYW5nZXMubGFiZWxzICk7XHJcbiAgfVxyXG5cclxuICBpbml0U1ZHKCkge1xyXG4gICAgaWYgKCF0aGlzLmQzU3ZnKSB7XHJcbiAgICAgIGNvbnN0IGQzUGFyZW50RWxlbWVudCA9IHRoaXMuZDMuc2VsZWN0KHRoaXMucGFyZW50TmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIHRoaXMuZDNTdmcgPSBkM1BhcmVudEVsZW1lbnQuc2VsZWN0KCcuaGJveC1wbG90JykuYXBwZW5kKCdzdmcnKTtcclxuICAgICAgdGhpcy5kM1N2Zy5hdHRyKCd3aWR0aCcsICcwJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uSW5pdCgpIHtcclxuXHJcbiAgICBpZiAodGhpcy5wYXJlbnROYXRpdmVFbGVtZW50ICE9PSBudWxsKSB7XHJcblxyXG5cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ01pc3NpbmcgcGFycmVudCBlbGVtZW50IGZvciB0aGUgY29tcG9uZW50Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBuZ09uRGVzdHJveSgpIHtcclxuICAgIGlmICh0aGlzLmQzU3ZnICYmIHRoaXMuZDNTdmcuZW1wdHkgJiYgIXRoaXMuZDNTdmcuZW1wdHkoKSkge1xyXG4gICAgICB0aGlzLmQzU3ZnLnNlbGVjdEFsbCgnKicpLnJlbW92ZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT25seSBmb3IgdGVzdGluZ1xyXG4gICAqIEBwYXJhbSBjb250ZXh0XHJcbiAgICovXHJcbiAgdGVzdEdyYXBoaWNDb250ZXh0KGNvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0ID0gY29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qIE5vdCBuZWVkZWQgYW55IG1vcmUsIHRoZSBoaWRkaW5nIGlzIGFjaGlldmVkIGJ5IHNpbXBsZSBkaXYgaGlkZGVuIGF0dHJpYnV0ZVxyXG4gICAvLyBhbmQgdGhlIHByb2JsZW0gd2l0aCBsYWJlbHMgYmFja2dyb3VuZCByZW5kZXJpbmcgaXMgc29sdmVkIHVzaW5nIGRlbGF5ZWQgcmVuZGVyaW5nIHdpdGggYSB0aW1lci5cclxuICAgaGFuZGxlSGlkaW5nKCkge1xyXG4gICBpZiAodGhpcy5oaWRkZW4pIHtcclxuICAgdGhpcy5yZW1vdmVkID0gdGhpcy5kM1N2Zy5yZW1vdmUoKTtcclxuICAgfSBlbHNlIHtcclxuICAgaWYgKHRoaXMucmVtb3ZlZCkge1xyXG4gICB0aGlzLmQzLnNlbGVjdCh0aGlzLnBhcmVudE5hdGl2ZUVsZW1lbnQpXHJcbiAgIC5zZWxlY3QoJy5oYm94LXBsb3QnKVxyXG4gICAuYXBwZW5kKCgpID0+IHRoaXMuZDNTdmcubm9kZSgpKTtcclxuICAgdGhpcy5yZW1vdmVkID0gdW5kZWZpbmVkO1xyXG4gICB9XHJcbiAgIH1cclxuXHJcbiAgIH0qL1xyXG5cclxuICB1cGRhdGVQbG90KCkge1xyXG5cclxuICAgIC8vIHRoaXMuZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvblRpbWUgPSB0aGlzLmxvb2tBbmRGZWVsLnRyYW5zaXRpb25UaW1lO1xyXG5cclxuICAgIGlmICh0aGlzLmxvb2tBbmRGZWVsLnRyYW5zaXRpb25UaW1lID4gMCkge1xyXG4gICAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA9IHRydWU7XHJcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24gPSAodGhpcy5kMyBhcyBhbnkpLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0aGlzLmxvb2tBbmRGZWVsLnRyYW5zaXRpb25UaW1lKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMudXBkYXRlUGFsZXR0ZSh0aGlzLmRhdGEsIHRoaXMucGFsZXR0ZSwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgbGV0IGJveGVzID0gdGhpcy5wcmVwYXJlRGF0YU1vZGVsKHRoaXMuZGF0YSwgdGhpcy5yZW1vdmVkLCB0aGlzLmxhYmVscywgdGhpcy5ncmFwaGljQ29udGV4dC5wYWxldHRlLFxyXG4gICAgICB0aGlzLmRvbWFpbiwgdGhpcy5zb3J0RnVuY3Rpb24pO1xyXG5cclxuICAgIGJveGVzID0gYm94ZXMuZmlsdGVyKGIgPT4gIWIuaGlkZGVuKTtcclxuXHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0ID0gdGhpcy5wcmVwYXJlUGFuZShib3hlcywgdGhpcy5sb29rQW5kRmVlbCwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dCA9IHRoaXMucHJlcGFyZVNjYWxlcyhib3hlcywgdGhpcy5kb21haW4sIHRoaXMubG9va0FuZEZlZWwsIHRoaXMuZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnBsb3RBeGlzQm94KGJveGVzLCB0aGlzLmRvbWFpbiwgdGhpcy5sb29rQW5kRmVlbCwgdGhpcy5tYWluUGFuZSwgdGhpcy5ncmFwaGljQ29udGV4dCk7XHJcblxyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnBsb3REYXRhQm94ZXMoYm94ZXMsIHRoaXMubG9va0FuZEZlZWwsIHRoaXMubWFpblBhbmUsIHRoaXMuZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnByZXBhcmVUb29sdGlwKHRoaXMubWFpblBhbmUsIHRoaXMuZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnByZXBhcmVMYWJlbHMoYm94ZXMsIHRoaXMubWFpblBhbmUsIHRoaXMubG9va0FuZEZlZWwsIHRoaXMuZ3JhcGhpY0NvbnRleHQsIHRoaXMubGFiZWxzT24pO1xyXG5cclxuICB9XHJcblxyXG4gIHByZXBhcmVEYXRhTW9kZWwoZGF0YTogbnVtYmVyW11bXSwgcmVtb3ZlZDogbnVtYmVyW10sIGxhYmVsczogc3RyaW5nW10sIHBhbGV0dGU6IHN0cmluZ1tdLCBkb21haW46IG51bWJlcltdLFxyXG4gICAgICAgICAgICAgICAgICAgc29ydEZ1bmN0aW9uOiAoYjE6IEJveERlZmluaXRpb24sIGIyOiBCb3hEZWZpbml0aW9uKSA9PiBudW1iZXIpOiBCb3hEZWZpbml0aW9uW10ge1xyXG5cclxuICAgIGxldCBib3hlcyA9IHRoaXMuYm94VXRpbC5kYXRhVG9Cb3hlcyhkYXRhKTtcclxuXHJcbiAgICB0aGlzLmJveFV0aWwubW9ja0VtcHR5VmFsdWVzKGJveGVzLCBkb21haW5bMV0pO1xyXG4gICAgdGhpcy5sYWJlbEJveGVzKGJveGVzLCBsYWJlbHMpO1xyXG5cclxuICAgIHRoaXMuY29sb3JCb3hlcyhib3hlcywgcGFsZXR0ZSk7XHJcblxyXG4gICAgcmVtb3ZlZC5mb3JFYWNoKGl4ID0+IHtcclxuICAgICAgaWYgKGJveGVzW2l4XSkge1xyXG4gICAgICAgIGJveGVzW2l4XS5oaWRkZW4gPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBib3hlcyA9IGJveGVzLnNvcnQoc29ydEZ1bmN0aW9uKTtcclxuICAgIHJldHVybiBib3hlcztcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgdXBkYXRlUGFsZXR0ZShkYXRhOiBhbnlbXSwgcGFsZXR0ZTogc3RyaW5nW10sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoIXBhbGV0dGUgfHwgcGFsZXR0ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQucGFsZXR0ZSA9IEJEMkNvbG9yUGFsZXR0ZS5wYWxldHRlKGRhdGEubGVuZ3RoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LnBhbGV0dGUgPSBCRDJDb2xvclBhbGV0dGUuZXh0ZW5kUGFsZXR0ZShwYWxldHRlLCBkYXRhLmxlbmd0aCk7XHJcblxyXG4gICAgfVxyXG4gICAgdGhpcy5jb2xvcnMubmV4dChncmFwaGljQ29udGV4dC5wYWxldHRlLnNsaWNlKCkpO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG4gIGNvbG9yQm94ZXMoYm94ZXM6IEJveERlZmluaXRpb25bXSwgcGFsZXR0ZTogc3RyaW5nW10pIHtcclxuICAgIGJveGVzLmZvckVhY2goYiA9PiBiLmNvbG9yID0gcGFsZXR0ZVtiLml4XSk7XHJcbiAgfVxyXG5cclxuXHJcbiAgcHJlcGFyZVBhbmUoZGF0YTogYW55W10sIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KTogR3JhcGhpY0NvbnRleHQge1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKFwiUFBcIixkYXRhKTtcclxuXHJcbiAgICBpZiAoIXRoaXMubWFpblBhbmUpIHtcclxuICAgICAgLy8gbGV0IGQzUGFyZW50RWxlbWVudCA9IHRoaXMuZDMuc2VsZWN0KHRoaXMucGFyZW50TmF0aXZlRWxlbWVudCk7XHJcbiAgICAgIC8vIHRoaXMuZDNTdmcgPSBkM1BhcmVudEVsZW1lbnQuc2VsZWN0KCcuaGJveC1wbG90JykuYXBwZW5kPFNWR1NWR0VsZW1lbnQ+KCdzdmcnKTtcclxuICAgICAgdGhpcy5kM1N2Zy5hdHRyKCd3aWR0aCcsICcxMDAlJyk7XHJcblxyXG4gICAgICB0aGlzLm1haW5QYW5lID0gdGhpcy5kM1N2Zy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdnJyk7XHJcbiAgICAgIHRoaXMubWFpblBhbmUuY2xhc3NlZCgnbWFpblBhbmUnLCB0cnVlKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgcFdpZHRoID0gNTAwO1xyXG4gICAgY29uc3QgcEhlaWdodCA9IHRoaXMuY2FsY3VsYXRlV29ya3NwYWNlSGVpZ2h0KGRhdGEsIGxvb2tBbmRGZWVsKSArIDIgKiBsb29rQW5kRmVlbC52TWFyZ2luO1xyXG5cclxuICAgIGNvbnN0IGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyB0aGlzLmQzU3ZnLnRyYW5zaXRpb24oZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbikgOiB0aGlzLmQzU3ZnKTtcclxuICAgIGVsbS5hdHRyKCd2aWV3Qm94JywgJzAgMCAnICsgcFdpZHRoICsgJyAnICsgcEhlaWdodCk7XHJcbiAgICB0aGlzLm1haW5QYW5lLmF0dHIoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoJyArIGxvb2tBbmRGZWVsLmhNYXJnaW5MICsgJywnICsgbG9va0FuZEZlZWwudk1hcmdpbiArICcpJyk7XHJcbiAgICAvLyAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgnICsgKHBXaWR0aCAvIDIpICsgJywnICsgKHBIZWlnaHQgLyAyKSArICcpJyk7IC8vbW92ZXMgMCwwIG9mIHRoZSBwYWluIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGdyYXBoaWNzXHJcblxyXG4gICAgZ3JhcGhpY0NvbnRleHQud29ya3NwYWNlV2lkdGggPSBwV2lkdGggLSBsb29rQW5kRmVlbC5oTWFyZ2luTCAtIGxvb2tBbmRGZWVsLmhNYXJnaW5SO1xyXG4gICAgZ3JhcGhpY0NvbnRleHQud29ya3NwYWNlSGVpZ2h0ID0gcEhlaWdodCAtIDIgKiBsb29rQW5kRmVlbC52TWFyZ2luO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuXHJcbiAgfVxyXG5cclxuICBjYWxjdWxhdGVXb3Jrc3BhY2VIZWlnaHQoZGF0YTogYW55W10sIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCkge1xyXG4gICAgcmV0dXJuIGxvb2tBbmRGZWVsLnJvd1dpZHRoICogZGF0YS5sZW5ndGg7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIGxhYmVsQm94ZXMoYm94ZXM6IEJveERlZmluaXRpb25bXSwgbGFiZWxzOiBzdHJpbmdbXSkge1xyXG4gICAgaWYgKCFsYWJlbHMpIHtcclxuICAgICAgbGFiZWxzID0gW107XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGJveGVzLmZvckVhY2goKGIsIGl4KSA9PiB7XHJcbiAgICAgIGIubGFiZWwgPSBsYWJlbHNbaXhdID8gbGFiZWxzW2l4XSA6ICcnICsgKGl4ICsgMSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByZXBhcmVMYWJlbHMoYm94ZXM6IEJveERlZmluaXRpb25bXSwgbWFpblBhbmU6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+LCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsXHJcbiAgICAgICAgICAgICAgICBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQsIGxhYmVsc09uOiBzdHJpbmcpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG4gICAgaWYgKCFncmFwaGljQ29udGV4dC5sYWJlbHNXcmFwcGVyKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LmxhYmVsc1dyYXBwZXIgPSBtYWluUGFuZS5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdnJylcclxuICAgICAgICAuY2xhc3NlZCgnbGFiZWxzV3JhcHBlcicsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQuYmFja0xhYmVsc1dyYXBwZXIpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQuYmFja0xhYmVsc1dyYXBwZXIgPSBtYWluUGFuZS5pbnNlcnQ8U1ZHR0VsZW1lbnQ+KCdnJywgJ2cuZGF0YVdyYXBwZXInKVxyXG4gICAgICAgIC5jbGFzc2VkKCdiYWNrTGFiZWxzV3JhcHBlcicsIHRydWUpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGJhY2tMYWJlbHNPbiA9IGxhYmVsc09uID09PSAnYWx3YXlzJztcclxuICAgIGNvbnN0IG1haW5MYWJlbHNPbiA9IGxhYmVsc09uID09PSAnYWx3YXlzJyB8fCBsYWJlbHNPbiA9PT0gJ3RyaWdnZXInO1xyXG5cclxuXHJcbiAgICBjb25zdCBsYWJlbHMgPSBncmFwaGljQ29udGV4dC5sYWJlbHNXcmFwcGVyLnNlbGVjdEFsbCgnZy55TGFiZWwnKVxyXG4gICAgICAuZGF0YShtYWluTGFiZWxzT24gPyBib3hlcyA6IFtdLCAoZDogQm94RGVmaW5pdGlvbikgPT4gZC5rZXkpO1xyXG5cclxuICAgIGxhYmVscy5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgY29uc3QgbmV3TGFiZWxzID0gbGFiZWxzLmVudGVyKClcclxuICAgICAgLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKVxyXG4gICAgICAuY2xhc3NlZCgneUxhYmVsJywgdHJ1ZSk7XHJcblxyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBuZXdMYWJlbHMub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGV2bnQ6IE1vdXNlRXZlbnQsIGQ6IEJveERlZmluaXRpb24pIHtcclxuICAgICAgICBkMy5zZWxlY3QodGhpcylcclxuICAgICAgICAgIC5zZWxlY3RBbGwoJy55TGFiZWwnKVxyXG4gICAgICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcInZpc2libGVcIik7XHJcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKTtcclxuICAgICAgfSkub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgZDMuc2VsZWN0KHRoaXMpXHJcbiAgICAgICAgICAuc2VsZWN0QWxsKCcueUxhYmVsJylcclxuICAgICAgICAgIC8vIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCAnbm9uZScpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIG5ld0xhYmVscy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdyZWN0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3lUcmlnZ2VyJylcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCAxKVxyXG4gICAgO1xyXG5cclxuICAgIG5ld0xhYmVscy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdyZWN0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3lMYWJlbCcpXHJcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgMC4zNSlcclxuICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHJcblxyXG4gICAgbmV3TGFiZWxzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3RleHQnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAneUxhYmVsJylcclxuICAgICAgLmF0dHIoJ3RleHQtYW5jaG9yJywgJ2xlZnQnKVxyXG4gICAgICAuYXR0cignZG9taW5hbnQtYmFzZWxpbmUnLCAnY2VudHJhbCcpXHJcbiAgICAgIC5zdHlsZSgnZm9udC1zaXplJywgbG9va0FuZEZlZWwubGFiZWxGb250KVxyXG4gICAgICAuc3R5bGUoJ29wYWNpdHknLCAxKVxyXG4gICAgICAuYXR0cigneCcsIDUpXHJcbiAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG4gICAgLy8gLnN0eWxlKFwiZGlzcGxheVwiLCBcIm5vbmVcIik7XHJcbiAgICA7XHJcblxyXG4gICAgY29uc3QgYmFja0xhYmVscyA9IGdyYXBoaWNDb250ZXh0LmJhY2tMYWJlbHNXcmFwcGVyLnNlbGVjdEFsbCgnZy55TGFiZWwnKVxyXG4gICAgICAuZGF0YShiYWNrTGFiZWxzT24gPyBib3hlcyA6IFtdLCAoZDogQm94RGVmaW5pdGlvbikgPT4gZC5rZXkpO1xyXG5cclxuICAgIGJhY2tMYWJlbHMuZXhpdCgpLnJlbW92ZSgpO1xyXG5cclxuICAgIGNvbnN0IG5ld0JhY2tMYWJlbHMgPSBiYWNrTGFiZWxzLmVudGVyKClcclxuICAgICAgLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKVxyXG4gICAgICAuY2xhc3NlZCgneUxhYmVsJywgdHJ1ZSk7XHJcblxyXG4gICAgLypcclxuICAgICBuZXdCYWNrTGFiZWxzLmFwcGVuZDxTVkdHRWxlbWVudD4oXCJyZWN0XCIpXHJcbiAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInlMYWJlbFwiKVxyXG4gICAgIC5zdHlsZShcImZpbGwtb3BhY2l0eVwiLCAwLjA1KTtcclxuICAgICAqL1xyXG5cclxuICAgIG5ld0JhY2tMYWJlbHMuYXBwZW5kPFNWR0dFbGVtZW50PigndGV4dCcpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICd5TGFiZWwnKVxyXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbGVmdCcpXHJcbiAgICAgIC5hdHRyKCdkb21pbmFudC1iYXNlbGluZScsICdjZW50cmFsJylcclxuICAgICAgLnN0eWxlKCdmb250LXNpemUnLCBsb29rQW5kRmVlbC5sYWJlbEZvbnQpXHJcbiAgICAgIC5zdHlsZSgnb3BhY2l0eScsIGxvb2tBbmRGZWVsLmJhY2tMYWJlbE9wYWNpdHkpXHJcbiAgICAgIC5hdHRyKCd4JywgNSk7XHJcbiAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwiaGlkZGVuXCIpO1xyXG5cclxuXHJcbiAgICBjb25zdCBlbnRlclVwZGF0ZTogU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD4gPVxyXG4gICAgICBuZXdMYWJlbHMubWVyZ2UobGFiZWxzIGFzIGFueSkgYXMgU2VsZWN0aW9uPFNWR1NWR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD47XHJcblxyXG4gICAgY29uc3QgYmFja0VudGVyVXBkYXRlOiBTZWxlY3Rpb248U1ZHU1ZHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiA9XHJcbiAgICAgIG5ld0JhY2tMYWJlbHMubWVyZ2UoYmFja0xhYmVscyBhcyBhbnkpIGFzIFNlbGVjdGlvbjxTVkdTVkdFbGVtZW50LCBCb3hEZWZpbml0aW9uLCBudWxsLCB1bmRlZmluZWQ+O1xyXG5cclxuICAgIC8vIGNhbGxlZCB3aXRoIGRlbGF5IHRvIGFsbG93LCBwYXJlbnQgZGl2cyB0byBjb21wb25lbnQgc2V0cyB0aGVpciB2aXNpYmlsaXR5LCBvdGhlcndpc2UgdGhlIGJib3hlcyBjYW5ub3QgYmUgY2FsY3VsYXRlZFxyXG4gICAgLy8gYW5kIHRoZSBsYWJlbHMgYmFja2dyb3VuZHMgYW5kIHRyaWdlcnMgYXJlIG5vdCByZW5kZXJlZCBjb3JyZWN0bHlcclxuICAgIC8vIGl0IGlzIGEgaGFjaywgYnV0IGRvbid0IGtub3cgaG93IHRvIGRvIGl0IGNvcnJlY3RseVxyXG4gICAgLy8gdGltZXJzIGhhdmUgdG8gYmUgY2xlYXJlZCBhcyBvdGhlcndpc2Ugc2F3IGVycm9ycyBpbiBsb2dzIGZvciBmYXN0IGNoYW5naW5nIGlucHV0IGRhdGEgKGxpa2UgY2F1c2UgYnkgc29ydGluZyBhbmQgcGFnaW5hdGlvbilcclxuICAgIGdyYXBoaWNDb250ZXh0LmxhYmVsc1RpbWVycy5mb3JFYWNoKCB0aW1lciA9PiBjbGVhclRpbWVvdXQodGltZXIpKTtcclxuICAgIGdyYXBoaWNDb250ZXh0LmxhYmVsc1RpbWVycyA9IFtdO1xyXG4gICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuXHJcblxyXG4gICAgICBjb25zdCBiYm94ZXM6IFNWR1JlY3RbXSA9IFtdO1xyXG5cclxuICAgICAgZW50ZXJVcGRhdGUuc2VsZWN0PFNWR1NWR0VsZW1lbnQ+KCd0ZXh0JylcclxuICAgICAgICAuc3R5bGUoJ2Rpc3BsYXknLCBudWxsKVxyXG4gICAgICAgIC5hdHRyKCd5JywgZCA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpIC8gMilcclxuICAgICAgICAudGV4dChkID0+IGQubGFiZWwpXHJcbiAgICAgICAgLmVhY2goZnVuY3Rpb24oZCkge1xyXG4gICAgICAgICAgYmJveGVzLnB1c2godGhpcy5nZXRCQm94KCkpO1xyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coXCJEOiBcIiArIGQubGFiZWwsIHRoaXMuZ2V0QkJveCgpKTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC5zdHlsZSgnZGlzcGxheScsICdub25lJyk7XHJcblxyXG5cclxuICAgICAgbGV0IGVsbSA9IGJhY2tFbnRlclVwZGF0ZS5zZWxlY3Q8U1ZHU1ZHRWxlbWVudD4oJ3RleHQnKTtcclxuICAgICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICAgIGVsbVxyXG4gICAgICAgIC5hdHRyKCd5JywgZCA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpIC8gMilcclxuICAgICAgICAudGV4dChkID0+IGQubGFiZWwpXHJcbiAgICAgIC8vIC5zdHlsZShcImZpbGxcIiwgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAvKi5lYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICBiYm94ZXMucHVzaCh0aGlzLmdldEJCb3goKSk7XHJcbiAgICAgICAvL2NvbnNvbGUubG9nKFwiRDogXCIgKyBkLmxhYmVsLCB0aGlzLmdldEJCb3goKSk7XHJcbiAgICAgICB9KTsqL1xyXG4gICAgICA7XHJcblxyXG4gICAgICBjb25zdCB0cmlnZXJzID0gZW50ZXJVcGRhdGUuc2VsZWN0PFNWR1NWR0VsZW1lbnQ+KCcueVRyaWdnZXInKVxyXG4gICAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gZC5jb2xvcilcclxuICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZC5jb2xvcik7XHJcblxyXG5cclxuICAgICAgbGV0IHRlbG0gPSB0cmlnZXJzLmRhdGEoYmJveGVzKTtcclxuICAgICAgdGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyB0ZWxtLnRyYW5zaXRpb24oZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbikgOiB0ZWxtKSBhcyBhbnk7XHJcbiAgICAgIHRlbG1cclxuICAgICAgICAuYXR0cigneCcsIC03KVxyXG4gICAgICAgIC5hdHRyKCd5JywgYiA9PiBiLnkgLSAzKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGIgPT4gNylcclxuICAgICAgICAuYXR0cignaGVpZ2h0JywgYiA9PiBiLmhlaWdodCArIDYpO1xyXG5cclxuICAgICAgY29uc3QgZnJhbWVzID0gZW50ZXJVcGRhdGUuc2VsZWN0PFNWR1NWR0VsZW1lbnQ+KCdyZWN0LnlMYWJlbCcpXHJcbiAgICAgICAgLnN0eWxlKCdmaWxsJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgbG9va0FuZEZlZWwubGFiZWxGaWxsT3BhY2l0eSk7XHJcblxyXG4gICAgICBmcmFtZXMuZGF0YShiYm94ZXMpXHJcbiAgICAgICAgLmF0dHIoJ3gnLCAwKVxyXG4gICAgICAgIC5hdHRyKCd5JywgYiA9PiBiLnkgLSAzKVxyXG4gICAgICAgIC5hdHRyKCd3aWR0aCcsIGIgPT4gYi53aWR0aCArIDEwKVxyXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBiID0+IGIuaGVpZ2h0ICsgNyk7XHJcblxyXG5cclxuICAgICAgLypcclxuICAgICAgIGxldCBiYWNrRnJhbWVzID0gYmFja0VudGVyVXBkYXRlLnNlbGVjdDxTVkdTVkdFbGVtZW50PihcInJlY3QueUxhYmVsXCIpXHJcbiAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGQgPT4gZC5jb2xvcik7XHJcblxyXG4gICAgICAgYmFja0ZyYW1lcy5kYXRhKGJib3hlcylcclxuICAgICAgIC5hdHRyKFwieFwiLCAwKVxyXG4gICAgICAgLmF0dHIoXCJ5XCIsIGIgPT4gYi55IC0gMylcclxuICAgICAgIC5hdHRyKFwid2lkdGhcIiwgYiA9PiBiLndpZHRoICsgMTApXHJcbiAgICAgICAuYXR0cihcImhlaWdodFwiLCBiID0+IGIuaGVpZ2h0ICsgNyk7XHJcbiAgICAgICAqL1xyXG5cclxuICAgIH0sIDEwKTtcclxuXHJcbiAgICBncmFwaGljQ29udGV4dC5sYWJlbHNUaW1lcnMucHVzaCh0aW1lcik7XHJcbiAgICByZXR1cm4gZ3JhcGhpY0NvbnRleHQ7XHJcbiAgfVxyXG5cclxuXHJcbiAgcHJlcGFyZVRvb2x0aXAobWFpblBhbmU6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+LCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG4gICAgaWYgKGdyYXBoaWNDb250ZXh0LnRvb2x0aXBXcmFwcGVyKSB7XHJcbiAgICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICAgIH1cclxuXHJcbiAgICBncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlciA9IG1haW5QYW5lLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKVxyXG4gICAgICAuY2xhc3NlZCgndG9vbHRpcFdyYXBwZXInLCB0cnVlKTtcclxuXHJcbiAgICBncmFwaGljQ29udGV4dC50b29sdGlwQm94ID0gZ3JhcGhpY0NvbnRleHQudG9vbHRpcFdyYXBwZXIuYXBwZW5kPFNWR0dFbGVtZW50PigncmVjdCcpXHJcbiAgICAgIC5zdHlsZSgnZmlsbCcsICd3aGl0ZScpXHJcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgMC44KVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsICdncmV5JylcclxuICAgIC8vIC5zdHlsZShcInZpc2liaWxpdHlcIiwgXCJoaWRkZW5cIik7XHJcbiAgICA7XHJcblxyXG4gICAgZ3JhcGhpY0NvbnRleHQudG9vbHRpcFRleHQgPSBncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlci5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCd0ZXh0JylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3Rvb2x0aXAnKVxyXG4gICAgICAvLyAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibGVmdFwiKVxyXG4gICAgICAuYXR0cigndGV4dC1hbmNob3InLCAnbWlkZGxlJylcclxuICAgICAgLy8gLmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJtaWRkbGVcIilcclxuICAgICAgLy8gLmF0dHIoXCJhbGlnbm1lbnQtYmFzZWxpbmVcIiwgXCJiYXNlbGluZVwiKVxyXG4gICAgICAvLyAuYXR0cihcImR5XCIsIFwiLTEwcHhcIilcclxuICAgICAgLnN0eWxlKCdvcGFjaXR5JywgMSlcclxuICAgIC8vIC5hdHRyKFwiZHhcIiwgXCIwLjM1ZW1cIilcclxuICAgIC8vIC5zdHlsZShcImZvbnQtc2l6ZVwiLCB0aGlzLmxvb2tBbmRGZWVsLnRvb2x0aXBGb250U2l6ZSkgLy9cIjExcHhcIilcclxuICAgIC8vIC5zdHlsZShcIm9wYWNpdHlcIiwgMClcclxuICAgIDtcclxuXHJcbiAgICBncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlclxyXG4gICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHJcbiAgICByZXR1cm4gZ3JhcGhpY0NvbnRleHQ7XHJcbiAgfVxyXG5cclxuICBzaG93VG9vbHRpcCh2OiBudW1iZXIsIHg6IGFueSwgeTogYW55KSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhcIlNob3c6IFwiICsgdiArIFwiO1wiICsgdGhpcy5jb25zdHJ1Y3Rvci5uYW1lKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdTaG93OiAnICsgdiArICc7ICcgKyB4ICsgJzogJyArIHkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3YnLCBTbWFydFJvdW5kZXIucm91bmQodikpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3gnLCB0aGlzLmdyYXBoaWNDb250ZXh0LnhTY2FsZSh4KSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygneScsIHRoaXMuZ3JhcGhpY0NvbnRleHQueVNjYWxlKHkpKTtcclxuXHJcbiAgICBpZiAoIXRoaXMuZ3JhcGhpY0NvbnRleHQudG9vbHRpcFRleHQpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuZ3JhcGhpY0NvbnRleHQudG9vbHRpcFRleHRcclxuICAgICAgLmF0dHIoJ3gnLCB0aGlzLmdyYXBoaWNDb250ZXh0LnhTY2FsZSh4KSlcclxuICAgICAgLmF0dHIoJ3knLCB0aGlzLmdyYXBoaWNDb250ZXh0LnlTY2FsZSh5KSlcclxuICAgICAgLnRleHQoU21hcnRSb3VuZGVyLnJvdW5kKHYpKVxyXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0aGlzLmxvb2tBbmRGZWVsLmJhc2VUcmFuc2l0aW9uc1RpbWUgLyAyKVxyXG4gICAgLy8gLnN0eWxlKCdvcGFjaXR5JywgMSk7XHJcbiAgICA7XHJcblxyXG4gICAgLy8gSSBoYXZlIHRvIGNoYW5nZSB0aGUgZGlzcGxheSBoZXJlIGV2ZW4gYmVmb3JlIHRoZSBib3ggaXMgcmVhZHkgYXNcclxuICAgIC8vIGluIGZpcmVmb3ggdGhlIGdldEJCb3ggd2FzIG5vdCB3b3JraW5nIGlmIGNhbGxlZCB3aXRoIGRpc3BsYXkgbm9uZVxyXG4gICAgLy8gZ2l2aW5nIE5TX0VSUk9SX0ZBSUxVUkUgMjE0NzUwMDAzN1xyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlclxyXG4gICAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIFwidmlzaWJsZVwiKTtcclxuICAgICAgLnN0eWxlKCdkaXNwbGF5JywgbnVsbCk7XHJcblxyXG4gICAgY29uc3QgYmJveCA9IHRoaXMuZ3JhcGhpY0NvbnRleHQudG9vbHRpcFRleHQubm9kZSgpLmdldEJCb3goKTtcclxuXHJcbiAgICB0aGlzLmdyYXBoaWNDb250ZXh0LnRvb2x0aXBCb3hcclxuICAgICAgLmF0dHIoJ3gnLCBiYm94LnggLSAzKVxyXG4gICAgICAuYXR0cigneScsIGJib3gueSAtIDIpXHJcbiAgICAgIC5hdHRyKCd3aWR0aCcsIGJib3gud2lkdGggKyA2KVxyXG4gICAgICAuYXR0cignaGVpZ2h0JywgYmJveC5oZWlnaHQgKyA0KTtcclxuXHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuICBoaWRlVG9vbHRpcCgpIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKFwiSGlkZTogXCIpO1xyXG4gICAgaWYgKCF0aGlzLmdyYXBoaWNDb250ZXh0LnRvb2x0aXBUZXh0KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcblxyXG4gICAgdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwV3JhcHBlclxyXG4gICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBcImhpZGRlblwiKTtcclxuICAgICAgLnN0eWxlKCdkaXNwbGF5JywgJ25vbmUnKTtcclxuXHJcblxyXG4gICAgLy8gdGhpcy5ncmFwaGljQ29udGV4dC50b29sdGlwVGV4dFxyXG4gICAgLy8gLnRyYW5zaXRpb24oKS5kdXJhdGlvbih0aGlzLmxvb2tBbmRGZWVsLmJhc2VUcmFuc2l0aW9uc1RpbWUgLyAyKVxyXG4gICAgLy8gLnN0eWxlKFwib3BhY2l0eVwiLCAwKTtcclxuICB9XHJcblxyXG4gIHByZXBhcmVTY2FsZXMoZGF0YTogQm94RGVmaW5pdGlvbltdLCBkb21haW46IG51bWJlcltdLCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsXHJcbiAgICAgICAgICAgICAgICBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG4gICAgaWYgKCFncmFwaGljQ29udGV4dC54U2NhbGUpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQueFNjYWxlID0gZDMuc2NhbGVMaW5lYXIoKVxyXG4gICAgICAgIC5jbGFtcCh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBncmFwaGljQ29udGV4dC54U2NhbGVcclxuICAgICAgLmRvbWFpbihkb21haW4pXHJcbiAgICAgIC5yYW5nZShbMCwgZ3JhcGhpY0NvbnRleHQud29ya3NwYWNlV2lkdGhdKTtcclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LnlTY2FsZSkge1xyXG4gICAgICBncmFwaGljQ29udGV4dC55U2NhbGUgPSBkMy5zY2FsZUJhbmQoKVxyXG4gICAgICAgIC5wYWRkaW5nKGxvb2tBbmRGZWVsLnJvd0dhcClcclxuICAgICAgO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGRvbWFpblkgPSBkYXRhLm1hcCgoZCkgPT4gZC5rZXkpO1xyXG5cclxuICAgIGdyYXBoaWNDb250ZXh0LnlTY2FsZVxyXG4gICAgICAuZG9tYWluKGRvbWFpblkpXHJcbiAgICAgIC5yYW5nZShbMCwgZ3JhcGhpY0NvbnRleHQud29ya3NwYWNlSGVpZ2h0XSk7XHJcblxyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuICB9XHJcblxyXG4gIHBsb3RBeGlzQm94KGRhdGE6IEJveERlZmluaXRpb25bXSwgZG9tYWluOiBudW1iZXJbXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBtYWluUGFuZTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sXHJcbiAgICAgICAgICAgICAgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KTogR3JhcGhpY0NvbnRleHQge1xyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQuYXhpc1dyYXBwZXIpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQuYXhpc1dyYXBwZXIgPSB0aGlzLmluaXRBeGlzV3JhcHBlcihtYWluUGFuZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ3JhcGhpY0NvbnRleHQgPSB0aGlzLnBsb3RIb3Jpem9udGFsU2NhbGVzKGRvbWFpbiwgbG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0KTtcclxuICAgIGdyYXBoaWNDb250ZXh0ID0gdGhpcy5wbG90VmVydGljYWxTY2FsZXMoZGF0YSwgbG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICByZXR1cm4gZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gIH1cclxuXHJcbiAgaW5pdEF4aXNXcmFwcGVyKG1haW5QYW5lOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPik6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+IHtcclxuXHJcbiAgICBsZXQgd3JhcHBlciA9IG1haW5QYW5lLnNlbGVjdDxTVkdHRWxlbWVudD4oJy5heGlzV3JhcHBlcicpO1xyXG4gICAgaWYgKHdyYXBwZXIuc2l6ZSgpID09PSAwKSB7XHJcbiAgICAgIHdyYXBwZXIgPSBtYWluUGFuZS5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdnJykuYXR0cignY2xhc3MnLCAnYXhpc1dyYXBwZXInKTtcclxuXHJcbiAgICAgIHdyYXBwZXIuYXBwZW5kKCdnJykuYXR0cignY2xhc3MnLCAneFRvcEF4aXMnKTtcclxuICAgICAgd3JhcHBlci5hcHBlbmQoJ2cnKS5hdHRyKCdjbGFzcycsICd4Qm90dG9tQXhpcycpO1xyXG4gICAgICB3cmFwcGVyLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3lMZWZ0QXhpcycpO1xyXG4gICAgICB3cmFwcGVyLmFwcGVuZCgnZycpLmF0dHIoJ2NsYXNzJywgJ3lSaWdodEF4aXMnKTtcclxuXHJcbiAgICB9XHJcbiAgICByZXR1cm4gd3JhcHBlcjtcclxuICB9XHJcblxyXG4gIHBsb3RIb3Jpem9udGFsU2NhbGVzKGRvbWFpbjogbnVtYmVyW10sIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KTogR3JhcGhpY0NvbnRleHQge1xyXG5cclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LnhUb3BBeGlzKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LnhUb3BBeGlzID0gZDMuYXhpc1RvcChncmFwaGljQ29udGV4dC54U2NhbGUpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueEJvdHRvbUF4aXMpIHtcclxuICAgICAgZ3JhcGhpY0NvbnRleHQueEJvdHRvbUF4aXMgPSBkMy5heGlzQm90dG9tKGdyYXBoaWNDb250ZXh0LnhTY2FsZSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGxldCBlbG1UID0gZ3JhcGhpY0NvbnRleHQuYXhpc1dyYXBwZXIuc2VsZWN0KCdnLnhUb3BBeGlzJykgIGFzIGFueTtcclxuICAgIGVsbVQuY2FsbChncmFwaGljQ29udGV4dC54VG9wQXhpcyk7XHJcblxyXG4gICAgbGV0IGVsbUIgPSBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlci5zZWxlY3QoJ2cueEJvdHRvbUF4aXMnKSBhcyBhbnk7XHJcbiAgICBlbG1CID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbUIudHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IGVsbUIpO1xyXG4gICAgZWxtQlxyXG4gICAgICAuYXR0cigndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCcgKyBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VIZWlnaHQgKyAnKScpXHJcbiAgICAgIC5jYWxsKGdyYXBoaWNDb250ZXh0LnhCb3R0b21BeGlzKTtcclxuXHJcbiAgICByZXR1cm4gZ3JhcGhpY0NvbnRleHQ7XHJcblxyXG4gIH1cclxuXHJcbiAgcGxvdFZlcnRpY2FsU2NhbGVzKGRhdGE6IEJveERlZmluaXRpb25bXSwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQpOiBHcmFwaGljQ29udGV4dCB7XHJcblxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueUxlZnRBeGlzKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LnlMZWZ0QXhpcyA9IGQzLmF4aXNMZWZ0KGdyYXBoaWNDb250ZXh0LnlTY2FsZSlcclxuICAgICAgICAudGlja0Zvcm1hdCgoKSA9PiAnJylcclxuICAgICAgO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghZ3JhcGhpY0NvbnRleHQueVJpZ2h0QXhpcykge1xyXG4gICAgICBncmFwaGljQ29udGV4dC55UmlnaHRBeGlzID0gZDMuYXhpc1JpZ2h0KGdyYXBoaWNDb250ZXh0LnlTY2FsZSlcclxuICAgICAgICAudGlja1ZhbHVlcyhbXSlcclxuICAgICAgO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBlbG0gPSBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlci5zZWxlY3QoJ2cueUxlZnRBeGlzJykgYXMgYW55O1xyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKTtcclxuICAgIGVsbVxyXG4gICAgICAuY2FsbChncmFwaGljQ29udGV4dC55TGVmdEF4aXMpO1xyXG5cclxuXHJcbiAgICBlbG0gPSBncmFwaGljQ29udGV4dC5heGlzV3JhcHBlci5zZWxlY3QoJ2cueVJpZ2h0QXhpcycpXHJcbiAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKCcgKyBncmFwaGljQ29udGV4dC53b3Jrc3BhY2VXaWR0aCArICcsMCknKSBhcyBhbnk7XHJcbiAgICBlbG0gPSAoZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbk9uID8gZWxtLnRyYW5zaXRpb24oZ3JhcGhpY0NvbnRleHQudHJhbnNpdGlvbikgOiBlbG0pO1xyXG4gICAgZWxtXHJcbiAgICAgIC5jYWxsKGdyYXBoaWNDb250ZXh0LnlSaWdodEF4aXMpO1xyXG5cclxuICAgIHJldHVybiBncmFwaGljQ29udGV4dDtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgcGxvdERhdGFCb3hlcyhib3hlczogQm94RGVmaW5pdGlvbltdLCBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIG1haW5QYW5lOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCk6IEdyYXBoaWNDb250ZXh0IHtcclxuXHJcbiAgICBpZiAoIWdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyKSB7XHJcbiAgICAgIGdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyID0gbWFpblBhbmUuYXBwZW5kPFNWR0dFbGVtZW50PignZycpLmF0dHIoJ2NsYXNzJywgJ2RhdGFXcmFwcGVyJyk7XHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBsZXQgYm94V2lkZ2V0cyA9IGdyYXBoaWNDb250ZXh0LmRhdGFXcmFwcGVyLnNlbGVjdEFsbCgnLmJveFdpZGdldCcpIGFzIFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPjtcclxuXHJcbiAgICBib3hXaWRnZXRzID0gYm94V2lkZ2V0cy5kYXRhKGJveGVzLCBkID0+IGQua2V5KTtcclxuXHJcblxyXG4gICAgdGhpcy51cGRhdGVCb3hXaWRnZXRzKGJveFdpZGdldHMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgbmV3Qm94V2lkZ2V0cyA9IGJveFdpZGdldHMuZW50ZXIoKVxyXG4gICAgICAuYXBwZW5kPFNWR0dFbGVtZW50PignZycpLmF0dHIoJ2NsYXNzJywgJ2JveFdpZGdldCcpO1xyXG5cclxuXHJcbiAgICB0aGlzLmNyZWF0ZUJveFdpZGdldHMobmV3Qm94V2lkZ2V0cywgbG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLmV4aXQoKS5yZW1vdmUoKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlQm94V2lkZ2V0cyhib3hXaWRnZXRzOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD4sXHJcbiAgICAgICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIC8vIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgncmVjdC5iYWNrZHJvcCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25CYWNrZHJvcCwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHRoaXMudXBkYXRlV2hpc2tlcnMoYm94V2lkZ2V0cy5zZWxlY3QoJ2cud2hpc2tlcnMnKSBhcyBhbnksIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggcmVjdCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25Cb3hSZWN0YW5nbGUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggbGluZS5tZWRpYW5saW5lJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lZGlhbkxpbmUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBib3hXaWRnZXRzLnNlbGVjdCgnZy5ib3ggbGluZS5tZWFubGluZScpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25NZWFuTGluZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIGNvbnN0IG91dCA9IGJveFdpZGdldHMuc2VsZWN0KCdnLm91dGxpZXJzJykuc2VsZWN0QWxsKCcub3V0bGllcicpXHJcbiAgICAgIC5kYXRhKGQgPT4gZC5vdXRsaWVycy5tYXAoeCA9PiBbeCwgZC5rZXksIGQuY29sb3JdKSk7XHJcblxyXG4gICAgb3V0LmVudGVyKClcclxuICAgICAgLmNhbGwodGhpcy5jcmVhdGVPdXRsaWVyLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQsIHRoaXMucG9zaXRpb25PdXRsaWVyKTtcclxuXHJcbiAgICBvdXQuY2FsbCh0aGlzLnBvc2l0aW9uT3V0bGllciwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIG91dC5leGl0KCkucmVtb3ZlKCk7XHJcblxyXG4gICAgLy8gfSk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIHBvc2l0aW9uQmFja2Ryb3AoZWxtOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIEJveERlZmluaXRpb24sIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyBlbG0udHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IGVsbSkgYXMgYW55O1xyXG4gICAgZWxtXHJcbiAgICAgIC5hdHRyKCd4JywgKGQpID0+IG9mZnNldFNjYWxlVmFsdWUoZC5sb3dXc2tyLCAtNSwgZ3JhcGhpY0NvbnRleHQueFNjYWxlKSlcclxuICAgICAgLmF0dHIoJ3knLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cignd2lkdGgnLCAoZCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHgxID0gb2Zmc2V0U2NhbGVWYWx1ZShkLmxvd1dza3IsIC01LCBncmFwaGljQ29udGV4dC54U2NhbGUpO1xyXG4gICAgICAgIGNvbnN0IHgyID0gb2Zmc2V0U2NhbGVWYWx1ZShkLmhpZ2hXc2tyLCArNSwgZ3JhcGhpY0NvbnRleHQueFNjYWxlKTtcclxuICAgICAgICByZXR1cm4geDIgLSB4MTtcclxuICAgICAgfSlcclxuICAgICAgLmF0dHIoJ2hlaWdodCcsIChkKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKTtcclxuICAgICAgfSlcclxuICAgIC8vIC5zdHlsZShcInN0cm9rZVwiLCBkID0+IGQuY29sb3IpXHJcbiAgICAvLyAuc3R5bGUoXCJmaWxsXCIsIGQgPT4gZC5jb2xvcilcclxuICAgIDtcclxuXHJcbiAgfVxyXG5cclxuICBwb3NpdGlvbkJveFJlY3RhbmdsZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gnLCAoZCkgPT4gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSlcclxuICAgICAgLmF0dHIoJ3knLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAuYXR0cignd2lkdGgnLCAoZCkgPT4gKGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLnRocmRRbnQpIC0gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSkpXHJcbiAgICAgIC5hdHRyKCdoZWlnaHQnLCAoZCkgPT4ge1xyXG4gICAgICAgIHJldHVybiBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGQuY29sb3IpO1xyXG5cclxuICB9XHJcblxyXG4gIHBvc2l0aW9uTWVkaWFuTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lZGlhbikpXHJcbiAgICAgIC5hdHRyKCd5MScsIChkLCBpKSA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpKVxyXG4gICAgICAuYXR0cigneDInLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQubWVkaWFuKSlcclxuICAgICAgLmF0dHIoJ3kyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlJywgZCA9PiBkLmNvbG9yKVxyXG4gICAgICAvLyAuc3R5bGUoXCJ2aXNpYmlsaXR5XCIsIGQgPT4gZC5tZWFuID09PSBkLm1lZGlhbiA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gZC5tZWFuID09PSBkLm1lZGlhbiA/ICdub25lJyA6IG51bGwpO1xyXG5cclxuXHJcblxyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25NZWFuTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lYW4pKVxyXG4gICAgICAuYXR0cigneTEnLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSlcclxuICAgICAgLmF0dHIoJ3gyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLm1lYW4pKVxyXG4gICAgICAuYXR0cigneTInLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSArIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKSlcclxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBkID0+IGQuY29sb3IpO1xyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25PdXRsaWVyKGVsbTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIGVsbSA9IChncmFwaGljQ29udGV4dC50cmFuc2l0aW9uT24gPyBlbG0udHJhbnNpdGlvbihncmFwaGljQ29udGV4dC50cmFuc2l0aW9uKSA6IGVsbSkgYXMgYW55O1xyXG4gICAgZWxtLmF0dHIoJ2N4JywgZCA9PiBncmFwaGljQ29udGV4dC54U2NhbGUoZFswXSkpXHJcbiAgICAgIC5hdHRyKCdjeScsIGQgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGRbMV0pICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpIC8gMilcclxuICAgICAgLnN0eWxlKCdzdHJva2UnLCBkID0+IGRbMl0pXHJcbiAgICAgIC5zdHlsZSgnZmlsbCcsIGQgPT4gZFsyXSk7XHJcblxyXG4gIH1cclxuXHJcblxyXG4gIGNyZWF0ZU91dGxpZXIoZWxtOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPiwgbG9va0FuZEZlZWw6IExvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dDogR3JhcGhpY0NvbnRleHQsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk91dGxpZXJGdW5jdGlvbjogKGVsbTogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD4sIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkgPT4ge30pIHtcclxuXHJcblxyXG4gICAgZWxtXHJcbiAgICAgIC5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdjaXJjbGUnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnb3V0bGllcicpXHJcbiAgICAgIC5hdHRyKCdyJywgbG9va0FuZEZlZWwub3V0bGllcnNDaXJjbGVSYWRpdXMpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwub3V0bGllcnNTdHJva2VXaWR0aClcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBsb29rQW5kRmVlbC5vdXRsaWVyc0ZpbGxPcGFjaXR5KVxyXG4gICAgICAuY2FsbChwb3NpdGlvbk91dGxpZXJGdW5jdGlvbiwgZ3JhcGhpY0NvbnRleHQpXHJcbiAgICA7XHJcblxyXG4gIH1cclxuXHJcbiAgcG9zaXRpb25XaGlza2VyTGluZShlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgbGVmdDogYm9vbGVhbiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGxlZnQgPyBncmFwaGljQ29udGV4dC54U2NhbGUoZC5sb3dXc2tyKSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLnRocmRRbnQpKVxyXG4gICAgICAuYXR0cigneTEnLCAoZCwgaSkgPT4gZ3JhcGhpY0NvbnRleHQueVNjYWxlKGQua2V5KSArIGdyYXBoaWNDb250ZXh0LnlTY2FsZS5iYW5kd2lkdGgoKSAvIDIpXHJcbiAgICAgIC5hdHRyKCd4MicsIChkLCBpKSA9PiBsZWZ0ID8gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQuZnN0UW50KSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLmhpZ2hXc2tyKSlcclxuICAgICAgLmF0dHIoJ3kyJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkgKyBncmFwaGljQ29udGV4dC55U2NhbGUuYmFuZHdpZHRoKCkgLyAyKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZC5jb2xvcilcclxuICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBkID0+IChsZWZ0ICYmIChkLmxvd1dza3IgPT09IGQuZnN0UW50KSkgfHwgKCFsZWZ0ICYmIChkLmhpZ2hXc2tyID09PSBkLnRocmRRbnQpKSA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gKGxlZnQgJiYgKGQubG93V3NrciA9PT0gZC5mc3RRbnQpKSB8fCAoIWxlZnQgJiYgKGQuaGlnaFdza3IgPT09IGQudGhyZFFudCkpID8gJ25vbmUnIDogbnVsbCk7XHJcblxyXG5cclxuICB9XHJcblxyXG4gIHBvc2l0aW9uV2hpc2tlclRpcChlbG06IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPiwgbGVmdDogYm9vbGVhbiwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgZWxtID0gKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb25PbiA/IGVsbS50cmFuc2l0aW9uKGdyYXBoaWNDb250ZXh0LnRyYW5zaXRpb24pIDogZWxtKSBhcyBhbnk7XHJcbiAgICBlbG1cclxuICAgICAgLmF0dHIoJ3gxJywgKGQsIGkpID0+IGxlZnQgPyBncmFwaGljQ29udGV4dC54U2NhbGUoZC5sb3dXc2tyKSA6IGdyYXBoaWNDb250ZXh0LnhTY2FsZShkLmhpZ2hXc2tyKSlcclxuICAgICAgLmF0dHIoJ3kxJywgKGQsIGkpID0+IGdyYXBoaWNDb250ZXh0LnlTY2FsZShkLmtleSkpXHJcbiAgICAgIC5hdHRyKCd4MicsIChkLCBpKSA9PiBsZWZ0ID8gZ3JhcGhpY0NvbnRleHQueFNjYWxlKGQubG93V3NrcikgOiBncmFwaGljQ29udGV4dC54U2NhbGUoZC5oaWdoV3NrcikpXHJcbiAgICAgIC5hdHRyKCd5MicsIChkLCBpKSA9PiBncmFwaGljQ29udGV4dC55U2NhbGUoZC5rZXkpICsgZ3JhcGhpY0NvbnRleHQueVNjYWxlLmJhbmR3aWR0aCgpKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZC5jb2xvcilcclxuICAgICAgLy8gLnN0eWxlKFwidmlzaWJpbGl0eVwiLCBkID0+IChsZWZ0ICYmIChkLmxvd1dza3IgPT09IGQuZnN0UW50KSkgfHwgKCFsZWZ0ICYmIChkLmhpZ2hXc2tyID09PSBkLnRocmRRbnQpKSA/IFwiaGlkZGVuXCIgOiBcInZpc2libGVcIik7XHJcbiAgICAgIC5zdHlsZSgnZGlzcGxheScsIGQgPT4gKGxlZnQgJiYgKGQubG93V3NrciA9PT0gZC5mc3RRbnQpKSB8fCAoIWxlZnQgJiYgKGQuaGlnaFdza3IgPT09IGQudGhyZFFudCkpID8gJ25vbmUnIDogbnVsbCk7XHJcblxyXG5cclxuXHJcbiAgfVxyXG5cclxuICB1cGRhdGVXaGlza2Vycyh3aGlza2VyczogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBCb3hEZWZpbml0aW9uLCBudWxsLCB1bmRlZmluZWQ+LFxyXG4gICAgICAgICAgICAgICAgIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuICAgIHdoaXNrZXJzLnNlbGVjdCgnbGluZS53aGlza2VybGluZUwnKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uV2hpc2tlckxpbmUsIHRydWUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICB3aGlza2Vycy5zZWxlY3QoJ2xpbmUud2hpc2tlcmxpbmVSJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJMaW5lLCBmYWxzZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuICAgIHdoaXNrZXJzLnNlbGVjdCgnbGluZS53aGlza2VydGlwTCcpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCB0cnVlLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgd2hpc2tlcnMuc2VsZWN0KCdsaW5lLndoaXNrZXJ0aXBSJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJUaXAsIGZhbHNlLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gIH1cclxuXHJcbiAgY3JlYXRlV2hpc2tlcnMod2hpc2tlcnM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuXHJcbiAgICBjb25zdCBsd2hpc2tyID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJsaW5lTCcpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwud2hpc2tlclN0cm9rZVdpZHRoKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNCAzJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbldoaXNrZXJMaW5lLCB0cnVlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuICAgIGNvbnN0IHJ3aGlza3IgPSB3aGlza2Vycy5hcHBlbmQoJ2xpbmUnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnd2hpc2tlcmxpbmVSJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLWRhc2hhcnJheScsICc0IDMnKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uV2hpc2tlckxpbmUsIGZhbHNlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICBjb25zdCBsVGlwID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJ0aXBMJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCB0cnVlLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICBjb25zdCByVGlwID0gd2hpc2tlcnMuYXBwZW5kKCdsaW5lJylcclxuICAgICAgLmF0dHIoJ2NsYXNzJywgJ3doaXNrZXJ0aXBSJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC53aGlza2VyU3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5jYWxsKHRoaXMucG9zaXRpb25XaGlza2VyVGlwLCBmYWxzZSwgZ3JhcGhpY0NvbnRleHQpXHJcbiAgICA7XHJcblxyXG5cclxuICB9XHJcblxyXG4gIGNyZWF0ZUJveGVzKHdpZGdldHM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICBsb29rQW5kRmVlbDogTG9va0FuZEZlZWwsIGdyYXBoaWNDb250ZXh0OiBHcmFwaGljQ29udGV4dCkge1xyXG5cclxuXHJcbiAgICBjb25zdCByZWN0ID0gd2lkZ2V0cy5hcHBlbmQoJ3JlY3QnKVxyXG4gICAgICAuYXR0cignY2xhc3MnLCAnYm94JylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC5ib3hTdHJva2VXaWR0aClcclxuICAgICAgLnN0eWxlKCdmaWxsLW9wYWNpdHknLCBsb29rQW5kRmVlbC5ib3hGaWxsT3BhY2l0eSlcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbkJveFJlY3RhbmdsZSwgZ3JhcGhpY0NvbnRleHQpO1xyXG5cclxuXHJcbiAgICBjb25zdCBtZWRpYW4gPSB3aWRnZXRzLmFwcGVuZCgnbGluZScpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdtZWRpYW5saW5lJylcclxuICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBsb29rQW5kRmVlbC5ib3hTdHJva2VXaWR0aClcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lZGlhbkxpbmUsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcbiAgICBjb25zdCBpbnN0YW5jZSA9IHRoaXM7XHJcblxyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICByZWN0Lm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihldm50OiBNb3VzZUV2ZW50LCBkOiBCb3hEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgaW5zdGFuY2Uuc2hvd1Rvb2x0aXAoZC5tZWRpYW4sIGQubWVkaWFuLCBkLmtleSk7XHJcbiAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgIG1lZGlhbi5vbignbW91c2VvdmVyJywgZnVuY3Rpb24oZXZudDogTW91c2VFdmVudCwgZDogQm94RGVmaW5pdGlvbikge1xyXG4gICAgICAgIGluc3RhbmNlLnNob3dUb29sdGlwKGQubWVkaWFuLCBkLm1lZGlhbiwgZC5rZXkpO1xyXG4gICAgICB9KVxyXG4gICAgICAgIC5vbignbW91c2VvdXQnLCBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIGluc3RhbmNlLmhpZGVUb29sdGlwKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfSk7XHJcblxyXG4gICAgY29uc3QgbWVhbiA9IHdpZGdldHNcclxuICAgICAgLmFwcGVuZCgnbGluZScpXHJcbiAgICAgIC5hdHRyKCdjbGFzcycsICdtZWFubGluZScpXHJcbiAgICAgIC5zdHlsZSgnc3Ryb2tlLXdpZHRoJywgbG9va0FuZEZlZWwubWVhblN0cm9rZVdpZHRoKVxyXG4gICAgICAuc3R5bGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNCAyJylcclxuICAgICAgLmNhbGwodGhpcy5wb3NpdGlvbk1lYW5MaW5lLCBncmFwaGljQ29udGV4dClcclxuICAgIDtcclxuXHJcbiAgICAvLyBoYXMgdG8gYmUgb3V0c2lkZSBhbmd1bGFyLCB0byBwcmV2ZW50IGRldGVjdGlvblxyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICBtZWFuXHJcbiAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihldm50OiBNb3VzZUV2ZW50LCBkOiBCb3hEZWZpbml0aW9uKSB7XHJcbiAgICAgICAgICBpbnN0YW5jZS5zaG93VG9vbHRpcChkLm1lYW4sIGQubWVhbiwgZC5rZXkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgaW5zdGFuY2UuaGlkZVRvb2x0aXAoKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9KTtcclxuXHJcbiAgfVxyXG5cclxuICBjcmVhdGVCb3hXaWRnZXRzKG5ld0JveFdpZGdldHM6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgQm94RGVmaW5pdGlvbiwgbnVsbCwgdW5kZWZpbmVkPixcclxuICAgICAgICAgICAgICAgICAgIGxvb2tBbmRGZWVsOiBMb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQ6IEdyYXBoaWNDb250ZXh0KSB7XHJcblxyXG4gICAgLy8gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGluc3RhbmNlID0gdGhpcztcclxuXHJcbiAgICBjb25zdCBiYWNrZHJvcHMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ3JlY3QnKS5hdHRyKCdjbGFzcycsICdiYWNrZHJvcCcpXHJcbiAgICAvLyAuc3R5bGUoXCJzdHJva2Utd2lkdGhcIiwgbG9va0FuZEZlZWwuYm94U3Ryb2tlV2lkdGgpXHJcbiAgICAgIC5zdHlsZSgnZmlsbC1vcGFjaXR5JywgbG9va0FuZEZlZWwuYmFja2Ryb3BPcGFjaXR5KVxyXG4gICAgICAuc3R5bGUoJ2ZpbGwnLCBsb29rQW5kRmVlbC5iYWNrZHJvcENvbG9yKVxyXG4gICAgICAuY2FsbCh0aGlzLnBvc2l0aW9uQmFja2Ryb3AsIGdyYXBoaWNDb250ZXh0KTtcclxuXHJcblxyXG4gICAgY29uc3Qgd2hpc2tlcnMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKS5hdHRyKCdjbGFzcycsICd3aGlza2VycycpO1xyXG5cclxuICAgIHRoaXMuY3JlYXRlV2hpc2tlcnMod2hpc2tlcnMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG4gICAgY29uc3QgYm94ZXMgPSBuZXdCb3hXaWRnZXRzLmFwcGVuZDxTVkdHRWxlbWVudD4oJ2cnKS5hdHRyKCdjbGFzcycsICdib3gnKTtcclxuICAgIHRoaXMuY3JlYXRlQm94ZXMoYm94ZXMsIGxvb2tBbmRGZWVsLCBncmFwaGljQ29udGV4dCk7XHJcblxyXG5cclxuICAgIGNvbnN0IG91dGxpZXJzID0gbmV3Qm94V2lkZ2V0cy5hcHBlbmQ8U1ZHR0VsZW1lbnQ+KCdnJykuYXR0cignY2xhc3MnLCAnb3V0bGllcnMnKTtcclxuXHJcblxyXG4gICAgb3V0bGllcnMuc2VsZWN0QWxsKCcub3V0bGllcicpXHJcbiAgICAgIC5kYXRhKGQgPT4gZC5vdXRsaWVycy5tYXAoeCA9PiBbeCwgZC5rZXksIGQuY29sb3JdKSlcclxuICAgICAgLmVudGVyKClcclxuICAgICAgLmNhbGwodGhpcy5jcmVhdGVPdXRsaWVyLCBsb29rQW5kRmVlbCwgZ3JhcGhpY0NvbnRleHQsIHRoaXMucG9zaXRpb25PdXRsaWVyKVxyXG4gICAgO1xyXG5cclxuICAgIC8vIH0pO1xyXG4gIH1cclxuXHJcbn1cclxuIl19
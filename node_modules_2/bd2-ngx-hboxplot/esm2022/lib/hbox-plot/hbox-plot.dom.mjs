export class LookAndFeel {
    constructor() {
        this.vMargin = 25;
        this.hMarginL = 20;
        this.hMarginR = 15;
        this.rowWidth = 30;
        this.rowGap = 0.2;
        this.transitionTime = 600;
        this.boxStrokeWidth = '2px';
        this.boxFillOpacity = 0.35;
        this.meanStrokeWidth = '4px';
        this.labelFont = '12px';
        this.labelFillOpacity = 0.35;
        this.backLabelOpacity = 0.30;
        this.backdropColor = 'white';
        this.backdropOpacity = 1;
        this.whiskerStrokeWidth = '1px';
        this.outliersStrokeWidth = '1px';
        this.outliersCircleRadius = 3;
        this.outliersFillOpacity = 0.4;
    }
}
export let defualtLookAndFeel = function () {
    return new LookAndFeel();
};
export class GraphicContext {
    constructor() {
        /*transitionTime: number;
      
         get transitionOn(): boolean {
         return (this.transitionTime && this.transitionTime > 0);
         };*/
        this.labelsTimers = [];
    }
}
export function offsetScaleValue(x, pixOffset, scale) {
    const r = scale.range();
    const pos = scale(x) + pixOffset;
    if (pos < r[0]) {
        return r[0];
    }
    else if (pos > r[1]) {
        return r[1];
    }
    return pos;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGJveC1wbG90LmRvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2JkMi1uZ3gtaGJveHBsb3Qvc3JjL2xpYi9oYm94LXBsb3QvaGJveC1wbG90LmRvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFNQSxNQUFNLE9BQU8sV0FBVztJQUF4QjtRQUVFLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxXQUFNLEdBQUcsR0FBRyxDQUFDO1FBRWIsbUJBQWMsR0FBRyxHQUFHLENBQUM7UUFFckIsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFDdkIsbUJBQWMsR0FBRyxJQUFJLENBQUM7UUFDdEIsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFFeEIsY0FBUyxHQUFHLE1BQU0sQ0FBQztRQUNuQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDeEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO1FBRXhCLGtCQUFhLEdBQUcsT0FBTyxDQUFDO1FBQ3hCLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBRXBCLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUUzQix3QkFBbUIsR0FBRyxLQUFLLENBQUM7UUFDNUIseUJBQW9CLEdBQUcsQ0FBQyxDQUFDO1FBQ3pCLHdCQUFtQixHQUFHLEdBQUcsQ0FBQztJQUM1QixDQUFDO0NBQUE7QUFHRCxNQUFNLENBQUMsSUFBSSxrQkFBa0IsR0FBc0I7SUFDakQsT0FBTyxJQUFJLFdBQVcsRUFBRSxDQUFDO0FBQzNCLENBQUMsQ0FBQztBQUVGLE1BQU0sT0FBTyxjQUFjO0lBQTNCO1FBRUU7Ozs7YUFJSztRQTJCTCxpQkFBWSxHQUFHLEVBQUUsQ0FBQztJQUNwQixDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQVUsZ0JBQWdCLENBQUMsQ0FBUyxFQUFFLFNBQWlCLEVBQUUsS0FBa0M7SUFDL0YsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3hCLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUM7SUFDakMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ2QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDYjtTQUFNLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNyQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUNiO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0IHtUcmFuc2l0aW9ufSBmcm9tICdkMy10cmFuc2l0aW9uJztcclxuaW1wb3J0IHtBeGlzfSBmcm9tICdkMy1heGlzJztcclxuaW1wb3J0IHtTY2FsZUJhbmQsIFNjYWxlTGluZWFyfSBmcm9tICdkMy1zY2FsZSc7XHJcbmltcG9ydCB7U2VsZWN0aW9uLCBUcmFuc2l0aW9ufSBmcm9tICdkMyc7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2tBbmRGZWVsIHtcclxuXHJcbiAgdk1hcmdpbiA9IDI1O1xyXG4gIGhNYXJnaW5MID0gMjA7XHJcbiAgaE1hcmdpblIgPSAxNTtcclxuICByb3dXaWR0aCA9IDMwO1xyXG4gIHJvd0dhcCA9IDAuMjtcclxuXHJcbiAgdHJhbnNpdGlvblRpbWUgPSA2MDA7XHJcblxyXG4gIGJveFN0cm9rZVdpZHRoID0gJzJweCc7XHJcbiAgYm94RmlsbE9wYWNpdHkgPSAwLjM1O1xyXG4gIG1lYW5TdHJva2VXaWR0aCA9ICc0cHgnO1xyXG5cclxuICBsYWJlbEZvbnQgPSAnMTJweCc7XHJcbiAgbGFiZWxGaWxsT3BhY2l0eSA9IDAuMzU7XHJcbiAgYmFja0xhYmVsT3BhY2l0eSA9IDAuMzA7XHJcblxyXG4gIGJhY2tkcm9wQ29sb3IgPSAnd2hpdGUnO1xyXG4gIGJhY2tkcm9wT3BhY2l0eSA9IDE7XHJcblxyXG4gIHdoaXNrZXJTdHJva2VXaWR0aCA9ICcxcHgnO1xyXG5cclxuICBvdXRsaWVyc1N0cm9rZVdpZHRoID0gJzFweCc7XHJcbiAgb3V0bGllcnNDaXJjbGVSYWRpdXMgPSAzO1xyXG4gIG91dGxpZXJzRmlsbE9wYWNpdHkgPSAwLjQ7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgbGV0IGRlZnVhbHRMb29rQW5kRmVlbDogKCkgPT4gTG9va0FuZEZlZWwgPSBmdW5jdGlvbigpIHtcclxuICByZXR1cm4gbmV3IExvb2tBbmRGZWVsKCk7XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgR3JhcGhpY0NvbnRleHQge1xyXG5cclxuICAvKnRyYW5zaXRpb25UaW1lOiBudW1iZXI7XHJcblxyXG4gICBnZXQgdHJhbnNpdGlvbk9uKCk6IGJvb2xlYW4ge1xyXG4gICByZXR1cm4gKHRoaXMudHJhbnNpdGlvblRpbWUgJiYgdGhpcy50cmFuc2l0aW9uVGltZSA+IDApO1xyXG4gICB9OyovXHJcblxyXG4gIHRyYW5zaXRpb25PbjogYm9vbGVhbjtcclxuICB0cmFuc2l0aW9uOiBUcmFuc2l0aW9uPGFueSwgYW55LCBhbnksIGFueT47XHJcblxyXG4gIHdvcmtzcGFjZVdpZHRoOiBudW1iZXI7XHJcbiAgd29ya3NwYWNlSGVpZ2h0OiBudW1iZXI7XHJcblxyXG4gIGF4aXNXcmFwcGVyOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPjtcclxuICB4U2NhbGU6IFNjYWxlTGluZWFyPG51bWJlciwgbnVtYmVyPjtcclxuICB4VG9wQXhpczogQXhpczxudW1iZXIgfCB7IHZhbHVlT2YoKTogbnVtYmVyIH0+O1xyXG4gIHhCb3R0b21BeGlzOiBBeGlzPG51bWJlciB8IHsgdmFsdWVPZigpOiBudW1iZXIgfT47XHJcblxyXG4gIHlTY2FsZTogU2NhbGVCYW5kPHN0cmluZz47XHJcbiAgeUxlZnRBeGlzOiBBeGlzPHN0cmluZz47XHJcbiAgeVJpZ2h0QXhpczogQXhpczxzdHJpbmc+O1xyXG5cclxuICBwYWxldHRlOiBzdHJpbmdbXTtcclxuXHJcbiAgZGF0YVdyYXBwZXI6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+O1xyXG5cclxuICB0b29sdGlwV3JhcHBlcjogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD47XHJcbiAgdG9vbHRpcFRleHQ6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+O1xyXG4gIHRvb2x0aXBCb3g6IFNlbGVjdGlvbjxTVkdHRWxlbWVudCwgYW55LCBudWxsLCB1bmRlZmluZWQ+O1xyXG5cclxuICBsYWJlbHNXcmFwcGVyOiBTZWxlY3Rpb248U1ZHR0VsZW1lbnQsIGFueSwgbnVsbCwgdW5kZWZpbmVkPjtcclxuICBiYWNrTGFiZWxzV3JhcHBlcjogU2VsZWN0aW9uPFNWR0dFbGVtZW50LCBhbnksIG51bGwsIHVuZGVmaW5lZD47XHJcbiAgbGFiZWxzVGltZXJzID0gW107XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvZmZzZXRTY2FsZVZhbHVlKHg6IG51bWJlciwgcGl4T2Zmc2V0OiBudW1iZXIsIHNjYWxlOiBTY2FsZUxpbmVhcjxudW1iZXIsIG51bWJlcj4pIHtcclxuICBjb25zdCByID0gc2NhbGUucmFuZ2UoKTtcclxuICBjb25zdCBwb3MgPSBzY2FsZSh4KSArIHBpeE9mZnNldDtcclxuICBpZiAocG9zIDwgclswXSkge1xyXG4gICAgcmV0dXJuIHJbMF07XHJcbiAgfSBlbHNlIGlmIChwb3MgPiByWzFdKSB7XHJcbiAgICByZXR1cm4gclsxXTtcclxuICB9XHJcbiAgcmV0dXJuIHBvcztcclxufVxyXG5cclxuXHJcblxyXG4iXX0=
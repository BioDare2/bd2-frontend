import { BoxDefinition } from './box-dom';
//import {d3} from '../d3service';
import * as d3 from 'd3';
export class BoxUtil {
    dataToBoxes(data) {
        if (!data) {
            return [];
        }
        return data.map((v, ix) => {
            const b = this.datumToBox(v);
            b.ix = ix;
            b.key = (ix + 1) + '.';
            return b;
        });
    }
    datumToBox(data) {
        const box = new BoxDefinition();
        if (!data || data.length === 0) {
            return box;
        }
        data = data.sort(d3.ascending);
        box.mean = d3.mean(data);
        box.median = d3.median(data);
        box.fstQnt = d3.quantile(data, 0.25);
        box.thrdQnt = d3.quantile(data, 0.75);
        const iqr = 1.5 * (box.thrdQnt - box.fstQnt);
        box.lowWskr = box.fstQnt - iqr;
        box.highWskr = box.thrdQnt + iqr;
        for (let i = 0; i < data.length; i++) {
            if (data[i] >= box.lowWskr) {
                box.lowWskr = data[i];
                break;
            }
        }
        for (let i = data.length - 1; i >= 0; i--) {
            if (data[i] <= box.highWskr) {
                box.highWskr = data[i];
                break;
            }
        }
        box.outliers = data.filter(v => (v < box.lowWskr || v > box.highWskr));
        return box;
    }
    mockEmptyValues(boxes, missingVal) {
        boxes.forEach(box => {
            if (box.mean === undefined || box.mean === null) {
                box.mean = missingVal;
                box.median = missingVal;
                box.fstQnt = missingVal;
                box.thrdQnt = missingVal;
                box.lowWskr = missingVal;
                box.highWskr = missingVal;
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm94LXV0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9iZDItbmd4LWhib3hwbG90L3NyYy9saWIvaGJveC11dGlscy9ib3gtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sV0FBVyxDQUFDO0FBQ3hDLGtDQUFrQztBQUNsQyxPQUFPLEtBQUssRUFBRSxNQUFNLElBQUksQ0FBQztBQUV6QixNQUFNLE9BQU8sT0FBTztJQUVsQixXQUFXLENBQUMsSUFBZ0I7UUFDMUIsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFHRCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7WUFDeEIsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM3QixDQUFDLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNWLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsVUFBVSxDQUFDLElBQWM7UUFFdkIsTUFBTSxHQUFHLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzlCLE9BQU8sR0FBRyxDQUFDO1NBQ1o7UUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0IsR0FBRyxDQUFDLElBQUksR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pCLEdBQUcsQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QixHQUFHLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JDLEdBQUcsQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFdEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDN0MsR0FBRyxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztRQUMvQixHQUFHLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO1FBRWpDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEdBQUcsQ0FBQyxPQUFPLEVBQUU7Z0JBQzFCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUN0QixNQUFNO2FBQ1A7U0FDRjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN6QyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFO2dCQUMzQixHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkIsTUFBTTthQUNQO1NBQ0Y7UUFHRCxHQUFHLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsT0FBTyxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN2RSxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7SUFFRCxlQUFlLENBQUMsS0FBc0IsRUFBRSxVQUFrQjtRQUN4RCxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2xCLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxTQUFTLElBQUksR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQy9DLEdBQUcsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO2dCQUN0QixHQUFHLENBQUMsTUFBTSxHQUFHLFVBQVUsQ0FBQztnQkFDeEIsR0FBRyxDQUFDLE1BQU0sR0FBRyxVQUFVLENBQUM7Z0JBQ3hCLEdBQUcsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDO2dCQUN6QixHQUFHLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztnQkFDekIsR0FBRyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7YUFDM0I7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Qm94RGVmaW5pdGlvbn0gZnJvbSAnLi9ib3gtZG9tJztcclxuLy9pbXBvcnQge2QzfSBmcm9tICcuLi9kM3NlcnZpY2UnO1xyXG5pbXBvcnQgKiBhcyBkMyBmcm9tICdkMyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQm94VXRpbCB7XHJcblxyXG4gIGRhdGFUb0JveGVzKGRhdGE6IG51bWJlcltdW10pOiBCb3hEZWZpbml0aW9uW10ge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIGRhdGEubWFwKCh2LCBpeCkgPT4ge1xyXG4gICAgICBjb25zdCBiID0gdGhpcy5kYXR1bVRvQm94KHYpO1xyXG4gICAgICBiLml4ID0gaXg7XHJcbiAgICAgIGIua2V5ID0gKGl4ICsgMSkgKyAnLic7XHJcbiAgICAgIHJldHVybiBiO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkYXR1bVRvQm94KGRhdGE6IG51bWJlcltdKTogQm94RGVmaW5pdGlvbiB7XHJcblxyXG4gICAgY29uc3QgYm94ID0gbmV3IEJveERlZmluaXRpb24oKTtcclxuICAgIGlmICghZGF0YSB8fCBkYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICByZXR1cm4gYm94O1xyXG4gICAgfVxyXG5cclxuICAgIGRhdGEgPSBkYXRhLnNvcnQoZDMuYXNjZW5kaW5nKTtcclxuICAgIGJveC5tZWFuID0gZDMubWVhbihkYXRhKTtcclxuICAgIGJveC5tZWRpYW4gPSBkMy5tZWRpYW4oZGF0YSk7XHJcbiAgICBib3guZnN0UW50ID0gZDMucXVhbnRpbGUoZGF0YSwgMC4yNSk7XHJcbiAgICBib3gudGhyZFFudCA9IGQzLnF1YW50aWxlKGRhdGEsIDAuNzUpO1xyXG5cclxuICAgIGNvbnN0IGlxciA9IDEuNSAqIChib3gudGhyZFFudCAtIGJveC5mc3RRbnQpO1xyXG4gICAgYm94Lmxvd1dza3IgPSBib3guZnN0UW50IC0gaXFyO1xyXG4gICAgYm94LmhpZ2hXc2tyID0gYm94LnRocmRRbnQgKyBpcXI7XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChkYXRhW2ldID49IGJveC5sb3dXc2tyKSB7XHJcbiAgICAgICAgYm94Lmxvd1dza3IgPSBkYXRhW2ldO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgaWYgKGRhdGFbaV0gPD0gYm94LmhpZ2hXc2tyKSB7XHJcbiAgICAgICAgYm94LmhpZ2hXc2tyID0gZGF0YVtpXTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBib3gub3V0bGllcnMgPSBkYXRhLmZpbHRlcih2ID0+ICh2IDwgYm94Lmxvd1dza3IgfHwgdiA+IGJveC5oaWdoV3NrcikpO1xyXG4gICAgcmV0dXJuIGJveDtcclxuICB9XHJcblxyXG4gIG1vY2tFbXB0eVZhbHVlcyhib3hlczogQm94RGVmaW5pdGlvbltdLCBtaXNzaW5nVmFsOiBudW1iZXIpIHtcclxuICAgIGJveGVzLmZvckVhY2goYm94ID0+IHtcclxuICAgICAgaWYgKGJveC5tZWFuID09PSB1bmRlZmluZWQgfHwgYm94Lm1lYW4gPT09IG51bGwpIHtcclxuICAgICAgICBib3gubWVhbiA9IG1pc3NpbmdWYWw7XHJcbiAgICAgICAgYm94Lm1lZGlhbiA9IG1pc3NpbmdWYWw7XHJcbiAgICAgICAgYm94LmZzdFFudCA9IG1pc3NpbmdWYWw7XHJcbiAgICAgICAgYm94LnRocmRRbnQgPSBtaXNzaW5nVmFsO1xyXG4gICAgICAgIGJveC5sb3dXc2tyID0gbWlzc2luZ1ZhbDtcclxuICAgICAgICBib3guaGlnaFdza3IgPSBtaXNzaW5nVmFsO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbn1cclxuIl19
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Selection } from 'd3';
import { PetalNode } from '../polar-plot-utils/polar-plot.dom';
import { GraphicContext, LookAndFeel, ShowIndividualsOptions } from './polar-plot.dom';
import * as i0 from "@angular/core";
export declare class PolarPlotComponent implements OnInit, AfterViewInit, OnChanges, OnDestroy {
    private ngZone;
    private changeDetectorRef;
    data: number[][];
    errors: number[];
    removed: number[];
    scaleRadius: boolean;
    scaleWidth: boolean;
    showIndividuals: ShowIndividualsOptions;
    set domain(domain: [number, number]);
    palette: string[];
    labels: string[];
    labelsOn: boolean;
    lookAndFeel: LookAndFeel;
    colors: EventEmitter<string[]>;
    private d3;
    private parentNativeElement;
    private polarUtil;
    private d3Svg;
    private _domain;
    private showAllIndividuals;
    private showSelectedIndividuals;
    private graphicContext;
    constructor(ngZone: NgZone, changeDetectorRef: ChangeDetectorRef, element: ElementRef);
    /**
     * It is detached from angular to prevent unnecessary change detection
     */
    ngAfterViewInit(): void;
    /**
     * Explicit triggers re-drawing as need to have all the parameters set (so will not redrawn if data came frist and domain later)
     * @param changes
     */
    ngOnChanges(changes: SimpleChanges): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    initializeSvg(): GraphicContext;
    prepareLegendtip(context: GraphicContext): GraphicContext;
    showLegendtip(p: PetalNode, radius: number): void;
    hideLegendtip(): void;
    prepareTooltip(context: GraphicContext): GraphicContext;
    showTooltip(p: PetalNode, radius: number): void;
    hideTooltip(): void;
    updatePlot(): void;
    prepareDataModel(dataGroups: number[][], domain: number[], scaleRadius: boolean, scaleWidth: boolean, errors: number[], labels: string[], removed: number[], palette: string[]): PetalNode[];
    updatePalette(data: any[], palette: string[], context: GraphicContext): GraphicContext;
    labelPetals(petals: PetalNode[], labels: string[]): void;
    colorPetals(petals: PetalNode[], palette: string[]): void;
    plotDataPetals(petalNodes: PetalNode[], scaleRadius: boolean, scaleWidth: boolean, context: GraphicContext): GraphicContext;
    prepareIndividualDataInset(context: GraphicContext): GraphicContext;
    hideIndividualDataInset(): void;
    showIndividualDataInset(p: PetalNode, radius: number): void;
    plotAllDataDots(petals: PetalNode[], showDots: boolean, context: GraphicContext): GraphicContext;
    plotAxisGrid(context: GraphicContext): GraphicContext;
    updateAxisLabels(domain: number[], axisGrid: Selection<SVGGElement, any, null, undefined>): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<PolarPlotComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PolarPlotComponent, "bd2-ngx-polar-plot", never, { "data": { "alias": "data"; "required": false; }; "errors": { "alias": "errors"; "required": false; }; "removed": { "alias": "removed"; "required": false; }; "scaleRadius": { "alias": "scaleRadius"; "required": false; }; "scaleWidth": { "alias": "scaleWidth"; "required": false; }; "showIndividuals": { "alias": "showIndividuals"; "required": false; }; "domain": { "alias": "domain"; "required": false; }; "palette": { "alias": "palette"; "required": false; }; "labels": { "alias": "labels"; "required": false; }; "labelsOn": { "alias": "labelsOn"; "required": false; }; "lookAndFeel": { "alias": "lookAndFeel"; "required": false; }; }, { "colors": "colors"; }, never, never, false, never>;
}
